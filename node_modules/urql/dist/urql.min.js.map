{"version":3,"file":"urql.min.js","sources":["../src/utils/error.ts","../src/utils/keyForQuery.ts","../src/utils/request.ts","../src/utils/ssr.ts","../src/utils/typenames.ts","../src/utils/index.ts","../src/exchanges/ssr.ts","../src/exchanges/cache.ts","../src/exchanges/subscription.ts","../src/exchanges/debug.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/fallback.ts","../src/exchanges/compose.ts","../src/exchanges/index.ts","../src/client.ts","../src/utils/toSuspenseSource.ts","../src/context.ts","../src/hooks/useImmediateState.ts","../src/hooks/useDevtoolsContext.ts","../src/hooks/useImmediateEffect.ts","../src/hooks/useMutation.ts","../src/hooks/useRequest.ts","../src/hooks/useQuery.ts","../src/hooks/useSubscription.ts","../node_modules/tslib/tslib.es6.js","../src/components/Mutation.ts","../src/components/Query.ts","../src/components/Subscription.ts"],"sourcesContent":["import { GraphQLError } from 'graphql';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr !== undefined) {\n    error = `[Network] ${networkErr.message}`;\n    return error;\n  }\n\n  if (graphQlErrs !== undefined) {\n    graphQlErrs.forEach(err => {\n      error += `[GraphQL] ${err.message}\\n`;\n    });\n  }\n\n  return error.trim();\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (typeof error === 'string') {\n    return new GraphQLError(error);\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error.originalError,\n      error.extensions || {}\n    );\n  } else {\n    return error as any;\n  }\n};\n\n/** An error which can consist of GraphQL errors and Network errors. */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: GraphQLError[];\n  public networkError?: Error;\n  public response?: any;\n\n  constructor({\n    networkError,\n    graphQLErrors,\n    response,\n  }: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | GraphQLError | Error>;\n    response?: any;\n  }) {\n    const normalisedGraphQLErrors = (graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(networkError, normalisedGraphQLErrors);\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalisedGraphQLErrors;\n    this.networkError = networkError;\n    this.response = response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","import stringify from 'fast-json-stable-stringify';\nimport { DocumentNode, print } from 'graphql';\n\ninterface NameCache {\n  [key: string]: string;\n}\n\ninterface WithNameProperty {\n  name?: { value: string };\n  [key: string]: any;\n}\n\ninterface WithCacheProperty {\n  __key?: number;\n  [key: string]: any;\n}\n\nconst hash = (x: string): number => {\n  /* prettier-ignore */\n  for (var h = 5381 | 0, i = 0, l = x.length | 0; i < l; i++)\n    h = ((h << 5) + h) + x.charCodeAt(i);\n  return h >>> 0;\n};\n\nconst docNameCache = Object.create(null) as NameCache;\n\nexport const getKeyForQuery = (doc: DocumentNode): number => {\n  if ((doc as WithCacheProperty).__key !== undefined) {\n    return (doc as WithCacheProperty).__key as number;\n  }\n\n  // Using print() can be expensive, so we just check the definition nodes' names\n  let name = doc.definitions.reduce((acc, definition) => {\n    const node = definition as WithNameProperty;\n    return acc + (node.name !== undefined ? node.name.value : '');\n  }, '');\n\n  // This is for inputs that are not using constant references. In such a case\n  // we use the Document names, but we can't use those if they're not unique\n  if (process.env.NODE_ENV !== 'production' && name !== '') {\n    const printed = print(doc);\n    if (!(name in docNameCache)) {\n      docNameCache[name] = printed;\n    } else if (docNameCache[name] !== printed) {\n      console.warn(\n        'Warning: Encountered multiple DocumentNodes with the same name.'\n      );\n    }\n  }\n\n  // If no name is present the stringified document is used\n  if (name === '') {\n    name = print(doc);\n  }\n\n  const key = hash(name);\n  (doc as WithCacheProperty).__key = key;\n  return key;\n};\n\nexport const getKeyForRequest = (\n  query: DocumentNode,\n  vars?: object\n): number => {\n  const docKey = getKeyForQuery(query);\n  if (vars === undefined || vars === null) {\n    return docKey;\n  }\n\n  return hash('' + docKey + stringify(vars));\n};\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\nimport { getKeyForRequest } from './keyForQuery';\nimport { GraphQLRequest, Operation, OperationContext } from '../types';\n\nexport const createRequest = (\n  q: string | DocumentNode,\n  vars?: object\n): GraphQLRequest => {\n  const query = typeof q === 'string' ? gql([q]) : q;\n\n  return {\n    key: getKeyForRequest(query, vars),\n    query,\n    variables: vars || {},\n  };\n};\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  source: Operation,\n  meta: Exclude<OperationContext['meta'], undefined>\n) => ({\n  ...source,\n  context: {\n    ...source.context,\n    meta: {\n      ...source.context.meta,\n      ...meta,\n    },\n  },\n});\n","export const isSSR =\n  typeof window === 'undefined' || !('HTMLElement' in window);\n","import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  OperationDefinitionNode,\n  visit,\n} from 'graphql';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: string[] = []) => {\n  if (Array.isArray(obj)) {\n    obj.forEach(inner => collectTypes(inner, types));\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const val = obj[key];\n        if (key === '__typename' && typeof val === 'string') {\n          types.push(val);\n        } else if (typeof val === 'object' && val !== null) {\n          collectTypes(val, types);\n        }\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object) =>\n  collectTypes(response as EntityLike).filter((v, i, a) => a.indexOf(v) === i);\n\nconst formatNode = (\n  n: FieldNode | InlineFragmentNode | OperationDefinitionNode\n) => {\n  if (n.selectionSet === undefined) {\n    return false;\n  }\n\n  if (\n    n.selectionSet.selections.some(\n      s => s.kind === 'Field' && s.name.value === '__typename'\n    )\n  ) {\n    return n;\n  }\n\n  return {\n    ...n,\n    selectionSet: {\n      ...n.selectionSet,\n      selections: [\n        ...n.selectionSet.selections,\n        {\n          kind: 'Field',\n          name: {\n            kind: 'Name',\n            value: '__typename',\n          },\n        },\n      ],\n    },\n  };\n};\n\nexport const formatDocument = (astNode: DocumentNode) =>\n  visit(astNode, {\n    Field: formatNode,\n    InlineFragment: formatNode,\n    OperationDefinition: formatNode,\n  });\n","export * from './error';\nexport * from './keyForQuery';\nexport * from './request';\nexport * from './ssr';\nexport * from './typenames';\nexport * from './toSuspenseSource';\n\nexport const noop = () => {\n  /* noop */\n};\n","import { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { CombinedError } from '../utils';\n\nexport interface SerializedResult {\n  data?: any;\n  error?: {\n    networkError?: string;\n    graphQLErrors: string[];\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  initialState?: SSRData;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'subscription' && operationName !== 'query';\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = ({\n  data,\n  error,\n}: OperationResult): SerializedResult => {\n  const result: SerializedResult = { data, error: undefined };\n  if (error !== undefined) {\n    result.error = {\n      networkError: '' + error.networkError,\n      graphQLErrors: error.graphQLErrors.map(x => '' + x),\n    };\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult\n): OperationResult => {\n  const { error, data } = result;\n  const deserialized: OperationResult = { operation, data, error: undefined };\n  if (error !== undefined) {\n    deserialized.error = new CombinedError({\n      networkError: new Error(error.networkError),\n      graphQLErrors: error.graphQLErrors,\n    });\n  }\n\n  return deserialized;\n};\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params?: SSRExchangeParams): SSRExchange => {\n  const data: SSRData = {};\n\n  const isCached = (operation: Operation) => {\n    return !shouldSkip(operation) && data[operation.key] !== undefined;\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(op => !isCached(op)),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => isCached(op)),\n      map(op => {\n        const serialized = data[op.key];\n        return deserializeResult(op, serialized);\n      })\n    );\n\n    if (client.suspense) {\n      // Inside suspense-mode we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (!shouldSkip(operation)) {\n            const serialized = serializeResult(result);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // Outside of suspense-mode we delete results from the cache as they're resolved\n      cachedOps$ = pipe(\n        cachedOps$,\n        tap((result: OperationResult) => {\n          delete data[result.operation.key];\n        })\n      );\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => Object.assign(data, restore);\n  ssr.extractData = () => Object.assign({}, data);\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult } from '../types';\nimport {\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\n\ninterface OperationCache {\n  [key: string]: Set<number>;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'mutation' && operationName !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client }) => {\n  const resultCache = new Map() as ResultCache;\n  const operationCache = Object.create(null) as OperationCache;\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => ({\n    ...operation,\n    query: formatDocument(operation.query),\n  });\n\n  const handleAfterMutation = afterMutation(\n    resultCache,\n    operationCache,\n    client\n  );\n\n  const handleAfterQuery = afterQuery(resultCache, operationCache);\n\n  const isOperationCached = operation => {\n    const {\n      key,\n      operationName,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      operationName === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const { key, context } = operation;\n        const cachedResult = resultCache.get(key);\n        if (context.requestPolicy === 'cache-and-network') {\n          reexecuteOperation(client, operation);\n        }\n\n        if (cachedResult !== undefined) {\n          return {\n            ...cachedResult,\n            operation: addMetadata(cachedResult.operation, {\n              cacheOutcome: 'hit',\n            }),\n          };\n        }\n\n        return {\n          data: undefined,\n          error: undefined,\n          operation: addMetadata(operation, { cacheOutcome: 'miss' }),\n        };\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      forward,\n      tap(response => {\n        if (\n          response.operation &&\n          response.operation.operationName === 'mutation'\n        ) {\n          handleAfterMutation(response);\n        } else if (\n          response.operation &&\n          response.operation.operationName === 'query'\n        ) {\n          handleAfterQuery(response);\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nconst reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation({\n    ...operation,\n    context: {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    },\n  });\n};\n\n// Invalidates the cache given a mutation's response\nexport const afterMutation = (\n  resultCache: ResultCache,\n  operationCache: OperationCache,\n  client: Client\n) => (response: OperationResult) => {\n  const pendingOperations = new Set<number>();\n\n  collectTypesFromResponse(response.data).forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.forEach(key => pendingOperations.add(key));\n    operations.clear();\n  });\n\n  pendingOperations.forEach(key => {\n    if (resultCache.has(key)) {\n      const operation = (resultCache.get(key) as OperationResult).operation;\n      resultCache.delete(key);\n      reexecuteOperation(client, operation);\n    }\n  });\n};\n\n// Mark typenames on typenameInvalidate for early invalidation\nconst afterQuery = (\n  resultCache: ResultCache,\n  operationCache: OperationCache\n) => (response: OperationResult) => {\n  const { operation, data } = response;\n\n  if (data === undefined) {\n    return;\n  }\n\n  resultCache.set(operation.key, response);\n\n  collectTypesFromResponse(response.data).forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.add(operation.key);\n  });\n};\n","import { print } from 'graphql';\n\nimport {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport { CombinedError } from '../utils/error';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables?: object;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n}\n\nconst isSubscriptionOperation = (operation: Operation) =>\n  operation.operationName === 'subscription';\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n}: SubscriptionExchangeOpts): Exchange => ({ forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(([next, complete]) => {\n      // TODO: The conversion of the result here is very similar to fetch;\n      // We can maybe extract the logic into generic GraphQL utilities\n      const sub = observableish.subscribe({\n        next: result =>\n          next({\n            operation,\n            data: result.data || undefined,\n            error: Array.isArray(result.errors)\n              ? new CombinedError({\n                  graphQLErrors: result.errors,\n                  response: undefined,\n                })\n              : undefined,\n          }),\n        error: err =>\n          next({\n            operation,\n            data: undefined,\n            error: new CombinedError({\n              networkError: err,\n              response: undefined,\n            }),\n          }),\n        complete,\n      });\n\n      // NOTE: Destructuring sub is avoided here to preserve its potential binding\n      return () => sub.unsubscribe();\n    });\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperation),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(\n          createSubscriptionSource(operation),\n          takeUntil(teardown$)\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperation(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n","import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\nexport const debugExchange: Exchange = ({ forward }) => {\n  return ops$ =>\n    pipe(\n      ops$,\n      // eslint-disable-next-line no-console\n      tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n      forward,\n      tap(result =>\n        // eslint-disable-next-line no-console\n        console.log('[Exchange debug]: Completed operation: ', result)\n      )\n    );\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, operationName } = operation;\n    if (operationName === 'teardown') {\n      inFlightKeys.delete(key);\n      return true;\n    } else if (operationName !== 'query') {\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation }: OperationResult) => {\n    inFlightKeys.delete(operation.key);\n  };\n\n  return ops$ => {\n    const forward$ = pipe(\n      ops$,\n      filter(filterIncomingOperation)\n    );\n    return pipe(\n      forward(forward$),\n      tap(afterOperationResult)\n    );\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { print } from 'graphql';\nimport { filter, make, merge, mergeMap, pipe, share, takeUntil } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\nimport { addMetadata, CombinedError } from '../utils';\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward }) => {\n  const isOperationFetchable = (operation: Operation) => {\n    const { operationName } = operation;\n    return operationName === 'query' || operationName === 'mutation';\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(isOperationFetchable),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(\n          createFetchSource(operation),\n          takeUntil(teardown$)\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isOperationFetchable(op)),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n\nconst createFetchSource = (operation: Operation) => {\n  if (operation.operationName === 'subscription') {\n    throw new Error(\n      'Received a subscription operation in the httpExchange. You are probably trying to create a subscription. Have you added a subscriptionExchange?'\n    );\n  }\n\n  return make<OperationResult>(([next, complete]) => {\n    const abortController =\n      typeof AbortController !== 'undefined'\n        ? new AbortController()\n        : undefined;\n\n    const { context } = operation;\n\n    const extraOptions =\n      typeof context.fetchOptions === 'function'\n        ? context.fetchOptions()\n        : context.fetchOptions || {};\n\n    const fetchOptions = {\n      body: JSON.stringify({\n        query: print(operation.query),\n        variables: operation.variables,\n      }),\n      method: 'POST',\n      ...extraOptions,\n      headers: {\n        'content-type': 'application/json',\n        ...extraOptions.headers,\n      },\n      signal:\n        abortController !== undefined ? abortController.signal : undefined,\n    };\n\n    const startTime = Date.now();\n    executeFetch(operation, fetchOptions).then(result => {\n      if (result !== undefined) {\n        next({\n          ...result,\n          operation: addMetadata(result.operation, {\n            networkLatency: Date.now() - startTime,\n          }),\n        });\n      }\n\n      complete();\n    });\n\n    return () => {\n      if (abortController !== undefined) {\n        abortController.abort();\n      }\n    };\n  });\n};\n\nconst executeFetch = (operation: Operation, opts: RequestInit) => {\n  let response: Response | undefined;\n  const { url } = operation.context;\n\n  return fetch(url, opts)\n    .then(res => {\n      response = res;\n      checkStatus(opts.redirect, response);\n      return response.json();\n    })\n    .then(result => ({\n      operation,\n      data: result.data,\n      error: Array.isArray(result.errors)\n        ? new CombinedError({\n            graphQLErrors: result.errors,\n            response,\n          })\n        : undefined,\n    }))\n    .catch(err => {\n      if (err.name === 'AbortError') {\n        return undefined;\n      }\n\n      return {\n        operation,\n        data: undefined,\n        error: new CombinedError({\n          networkError: err,\n          response,\n        }),\n      };\n    });\n};\n\nconst checkStatus = (redirectMode: string = 'follow', response: Response) => {\n  const statusRangeEnd = redirectMode === 'manual' ? 400 : 300;\n\n  if (response.status < 200 || response.status >= statusRangeEnd) {\n    throw new Error(response.statusText);\n  }\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { ExchangeIO, Operation } from '../types';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchangeIO: ExchangeIO = ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(({ operationName }) => {\n      if (\n        operationName !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        console.warn(\n          `No exchange has handled operations of type \"${operationName}\". Check whether you've added an exchange responsible for these operations.`\n        );\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n","import { Exchange } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]): Exchange => {\n  if (exchanges.length === 1) {\n    return exchanges[0];\n  }\n\n  return ({ client, forward: outerForward }) => {\n    return exchanges.reduceRight((forward, exchange) => {\n      return exchange({ client, forward });\n    }, outerForward);\n  };\n};\n","export { ssrExchange } from './ssr';\nexport { cacheExchange } from './cache';\nexport { subscriptionExchange } from './subscription';\nexport { debugExchange } from './debug';\nexport { dedupExchange } from './dedup';\nexport { fetchExchange } from './fetch';\nexport { fallbackExchangeIO } from './fallback';\nexport { composeExchanges } from './compose';\n\nimport { cacheExchange } from './cache';\nimport { dedupExchange } from './dedup';\nimport { fetchExchange } from './fetch';\n\nexport const defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport {\n  filter,\n  makeSubject,\n  onEnd,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n} from 'wonka';\n\nimport {\n  composeExchanges,\n  defaultExchanges,\n  fallbackExchangeIO,\n} from './exchanges';\n\nimport {\n  Exchange,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationResult,\n  OperationType,\n} from './types';\n\nimport { toSuspenseSource } from './utils';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n}\n\ninterface ActiveOperations {\n  [operationKey: string]: number;\n}\n\nexport const createClient = (opts: ClientOptions) => new Client(opts);\n\n/** The URQL application-wide client library. Each execute method starts a GraphQL request and returns a stream of results. */\nexport class Client {\n  // These are variables derived from ClientOptions\n  url: string;\n  fetchOptions?: RequestInit | (() => RequestInit);\n  exchange: Exchange;\n  suspense: boolean;\n\n  // These are internals to be used to keep track of operations\n  dispatchOperation: (operation: Operation) => void;\n  operations$: Source<Operation>;\n  results$: Source<OperationResult>;\n  activeOperations = Object.create(null) as ActiveOperations;\n\n  constructor(opts: ClientOptions) {\n    this.url = opts.url;\n    this.fetchOptions = opts.fetchOptions;\n    this.suspense = !!opts.suspense;\n\n    // This subject forms the input of operations; executeOperation may be\n    // called to dispatch a new operation on the subject\n    const [operations$, nextOperation] = makeSubject<Operation>();\n    this.operations$ = operations$;\n    this.dispatchOperation = nextOperation;\n\n    const exchanges =\n      opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n\n    // All exchange are composed into a single one and are called using the constructed client\n    // and the fallback exchange stream\n    this.exchange = composeExchanges(exchanges);\n\n    // All operations run through the exchanges in a pipeline-like fashion\n    // and this observable then combines all their results\n    this.results$ = share(\n      this.exchange({\n        client: this,\n        forward: fallbackExchangeIO,\n      })(this.operations$)\n    );\n  }\n\n  private createOperationContext = (\n    opts?: Partial<OperationContext>\n  ): OperationContext => {\n    const { requestPolicy = 'cache-first' } = opts || {};\n\n    return {\n      url: this.url,\n      fetchOptions: this.fetchOptions,\n      ...opts,\n      requestPolicy,\n    };\n  };\n\n  createRequestOperation = (\n    type: OperationType,\n    { key, query, variables }: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Operation => ({\n    key,\n    query,\n    variables,\n    operationName: type,\n    context: this.createOperationContext(opts),\n  });\n\n  /** Counts up the active operation key and dispatches the operation */\n  private onOperationStart(operation: Operation) {\n    const { key } = operation;\n    this.activeOperations[key] = (this.activeOperations[key] || 0) + 1;\n    this.dispatchOperation(operation);\n  }\n\n  /** Deletes an active operation's result observable and sends a teardown signal through the exchange pipeline */\n  private onOperationEnd(operation: Operation) {\n    const { key } = operation;\n    const prevActive = this.activeOperations[key] || 0;\n    const newActive = (this.activeOperations[key] =\n      prevActive <= 0 ? 0 : prevActive - 1);\n\n    if (newActive <= 0) {\n      this.dispatchOperation({ ...operation, operationName: 'teardown' });\n    }\n  }\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation(operation: Operation): Source<OperationResult> {\n    const { key, operationName } = operation;\n    const operationResults$ = pipe(\n      this.results$,\n      filter(res => res.operation.key === key)\n    );\n\n    if (operationName === 'mutation') {\n      // A mutation is always limited to just a single result and is never shared\n      return pipe(\n        operationResults$,\n        onStart<OperationResult>(() => this.dispatchOperation(operation)),\n        take(1)\n      );\n    }\n\n    const result$ = pipe(\n      operationResults$,\n      onStart<OperationResult>(() => this.onOperationStart(operation)),\n      onEnd<OperationResult>(() => this.onOperationEnd(operation))\n    );\n\n    return this.suspense ? toSuspenseSource(result$) : result$;\n  }\n\n  reexecuteOperation = (operation: Operation) => {\n    // Reexecute operation only if any subscribers are still subscribed to the\n    // operation's exchange results\n    if ((this.activeOperations[operation.key] || 0) > 0) {\n      this.dispatchOperation(operation);\n    }\n  };\n\n  executeQuery = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('query', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n\n  executeSubscription = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('subscription', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n\n  executeMutation = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('mutation', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n}\n","import { pipe, make, onPush, onEnd, subscribe, Source } from 'wonka';\n\n/** This converts a Source to a suspense Source; It will forward the first result synchronously or throw a promise that resolves when the result becomes available */\nexport const toSuspenseSource = <T>(source: Source<T>): Source<T> => {\n  // Create a new Source from scratch so we have full control over the Source's lifecycle\n  return make(([push, end]) => {\n    let isCancelled = false;\n    let resolveSuspense;\n    let synchronousResult;\n\n    const [teardown] = pipe(\n      source,\n      // The onPush and onEnd forward the underlying results as usual, so that when no\n      // suspense promise is thrown, the source behaves as it normally would\n      onPush(push),\n      onEnd(end),\n      subscribe(value => {\n        // When this operation resolved synchronously assign the result to\n        // synchronousResult which will be picked up below\n        if (resolveSuspense === undefined) {\n          synchronousResult = value;\n        } else if (!isCancelled) {\n          // Otherwise resolve the thrown promise,\n          resolveSuspense(value);\n          // And end and teardown both sources, since suspense will abort the\n          // underlying rendering component anyway\n          end();\n          teardown();\n        }\n      })\n    );\n\n    // If we have a synchronous result, push it onto this source, which is synchronous\n    // otherwise throw a new promise which will resolve later\n    if (synchronousResult === undefined) {\n      throw new Promise(resolve => {\n        resolveSuspense = resolve;\n      });\n    }\n\n    // Since promises aren't cancellable we have a flag that prevents\n    // the thrown promise from resolving if this source is cancelled\n    return () => {\n      isCancelled = true;\n      teardown();\n    };\n  });\n};\n","import { createContext } from 'react';\nimport { Client, createClient } from './client';\n\n// We assume some default options here; mainly not to actually be used\n// but not to error catastrophically if someone is just playing around\nconst defaultClient = createClient({ url: '/graphql' });\n\nexport const Context = createContext<Client>(defaultClient);\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;\n","import { useRef, useState, useCallback, useLayoutEffect } from 'react';\nimport { isSSR } from '../utils';\n\ntype SetStateAction<S> = S | ((prevState: S) => S);\ntype SetState<S> = (action: SetStateAction<S>) => void;\n\n/**\n * This is a drop-in replacement for useState, limited to object-based state.\n * During initial mount it will mutably update the state, instead of scheduling\n * a React update using setState\n */\nexport const useImmediateState = <S extends {}>(init: S): [S, SetState<S>] => {\n  const isMounted = useRef(false);\n  const initialState = useRef<S>({ ...init });\n  const [state, setState] = useState<S>(initialState.current);\n\n  // This wraps setState and updates the state mutably on initial mount\n  const updateState: SetState<S> = useCallback(\n    (action: SetStateAction<S>): void => {\n      if (!isMounted.current) {\n        const newValue =\n          typeof action === 'function'\n            ? (action as (arg: S) => S)(initialState.current)\n            : action;\n        Object.assign(initialState.current, newValue);\n      } else {\n        setState(action);\n      }\n    },\n    []\n  );\n\n  !isSSR && // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n\n  return [state, updateState];\n};\n","import * as React from 'react';\nimport { OperationContext } from '../types';\n\nconst {\n  ReactCurrentOwner: CurrentOwner,\n} = (React as any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// Is the Fiber a FunctionComponent, ClassComponent, or IndeterminateComponent\nconst isComponentFiber = (fiber: void | { tag: number }) =>\n  fiber && (fiber.tag === 0 || fiber.tag === 1 || fiber.tag === 2);\n\n// Is the component one of ours (just a heuristic to avoid circular dependencies or flags)\nconst isInternalComponent = (Component: { name: string }) =>\n  Component.name === 'Query' ||\n  Component.name === 'Mutation' ||\n  Component.name === 'Subscription';\n\nconst useDevtoolsContextImpl = (): Partial<OperationContext> => {\n  return React.useMemo(() => {\n    let source = 'Component';\n\n    // Check whether the CurrentOwner is set\n    const owner = CurrentOwner.current;\n    if (owner !== null && isComponentFiber(owner)) {\n      let Component = owner.type;\n\n      // If this is one of our own components then check the parent\n      if (\n        isInternalComponent(Component) &&\n        isComponentFiber(owner._debugOwner)\n      ) {\n        Component = owner._debugOwner.type;\n      }\n\n      // Get the Component's name if it has one\n      if (typeof Component === 'function') {\n        source = Component.displayName || Component.name || source;\n      }\n    }\n\n    return { meta: { source } };\n  }, []);\n};\n\n/** Creates additional context values for serving metadata to devtools. */\nexport const useDevtoolsContext: () => Partial<OperationContext> | undefined =\n  // NOTE: We check for CurrentOwner in case it'll be unexpectedly changed in React's source\n  process.env.NODE_ENV !== 'production' && !!CurrentOwner\n    ? useDevtoolsContextImpl\n    : () => undefined;\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useRef, useEffect, EffectCallback } from 'react';\n\nenum LifecycleState {\n  WillMount = 0,\n  DidMount = 1,\n  Update = 2,\n}\n\n/** This is a drop-in replacement for useEffect that will execute the first effect that happens during initial mount synchronously */\nexport const useImmediateEffect = (\n  effect: EffectCallback,\n  changes: ReadonlyArray<any>\n) => {\n  const teardown = useRef<ReturnType<EffectCallback>>(undefined);\n  const state = useRef(LifecycleState.WillMount);\n\n  // On initial render we just execute the effect\n  if (state.current === LifecycleState.WillMount) {\n    state.current = LifecycleState.DidMount;\n    teardown.current = effect();\n  }\n\n  useEffect(() => {\n    // Initially we skip executing the effect since we've already done so on\n    // initial render, then we execute it as usual\n    if (state.current === LifecycleState.Update) {\n      return (teardown.current = effect());\n    } else {\n      state.current = LifecycleState.Update;\n      return teardown.current;\n    }\n  }, changes);\n};\n","import { DocumentNode } from 'graphql';\nimport { useContext, useCallback } from 'react';\nimport { pipe, toPromise } from 'wonka';\nimport { Context } from '../context';\nimport { OperationResult } from '../types';\nimport { CombinedError, createRequest } from '../utils';\nimport { useImmediateState } from './useImmediateState';\nimport { useDevtoolsContext } from './useDevtoolsContext';\n\nexport interface UseMutationState<T> {\n  fetching: boolean;\n  data?: T;\n  error?: CombinedError;\n}\n\nexport type UseMutationResponse<T, V> = [\n  UseMutationState<T>,\n  (variables?: V) => Promise<OperationResult<T>>\n];\n\nexport const useMutation = <T = any, V = object>(\n  query: DocumentNode | string\n): UseMutationResponse<T, V> => {\n  const devtoolsContext = useDevtoolsContext();\n  const client = useContext(Context);\n  const [state, setState] = useImmediateState<UseMutationState<T>>({\n    fetching: false,\n    error: undefined,\n    data: undefined,\n  });\n\n  const executeMutation = useCallback(\n    (variables?: V) => {\n      setState({ fetching: true, error: undefined, data: undefined });\n\n      const request = createRequest(query, variables as any);\n\n      return pipe(\n        client.executeMutation(request, devtoolsContext),\n        toPromise\n      ).then(result => {\n        const { data, error } = result;\n        setState({ fetching: false, data, error });\n        return result;\n      });\n    },\n    [client, devtoolsContext, query, setState]\n  );\n\n  return [state, executeMutation];\n};\n","import { DocumentNode } from 'graphql';\nimport { useRef, useMemo } from 'react';\nimport { GraphQLRequest } from '../types';\nimport { createRequest } from '../utils';\n\n/** Creates a request from a query and variables but preserves reference equality if the key isn't changing */\nexport const useRequest = (\n  query: string | DocumentNode,\n  variables?: any\n): GraphQLRequest => {\n  const prev = useRef<undefined | GraphQLRequest>(undefined);\n\n  return useMemo(() => {\n    const request = createRequest(query, variables);\n    // We manually ensure reference equality if the key hasn't changed\n    if (prev.current !== undefined && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n};\n","import { DocumentNode } from 'graphql';\nimport { useCallback, useContext, useRef } from 'react';\nimport { pipe, subscribe } from 'wonka';\nimport { Context } from '../context';\nimport { OperationContext, RequestPolicy } from '../types';\nimport { CombinedError, noop } from '../utils';\nimport { useDevtoolsContext } from './useDevtoolsContext';\nimport { useRequest } from './useRequest';\nimport { useImmediateEffect } from './useImmediateEffect';\nimport { useImmediateState } from './useImmediateState';\n\nexport interface UseQueryArgs<V> {\n  query: string | DocumentNode;\n  variables?: V;\n  requestPolicy?: RequestPolicy;\n  pause?: boolean;\n}\n\nexport interface UseQueryState<T> {\n  fetching: boolean;\n  data?: T;\n  error?: CombinedError;\n}\n\nexport type UseQueryResponse<T> = [\n  UseQueryState<T>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nexport const useQuery = <T = any, V = object>(\n  args: UseQueryArgs<V>\n): UseQueryResponse<T> => {\n  const devtoolsContext = useDevtoolsContext();\n  const unsubscribe = useRef(noop);\n  const client = useContext(Context);\n\n  // This is like useState but updates the state object\n  // immediately, when we're still before the initial mount\n  const [state, setState] = useImmediateState<UseQueryState<T>>({\n    fetching: false,\n    data: undefined,\n    error: undefined,\n  });\n\n  // This creates a request which will keep a stable reference\n  // if request.key doesn't change\n  const request = useRequest(args.query, args.variables);\n\n  const executeQuery = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      unsubscribe.current();\n\n      setState(s => ({ ...s, fetching: true }));\n\n      [unsubscribe.current] = pipe(\n        client.executeQuery(request, {\n          requestPolicy: args.requestPolicy,\n          ...opts,\n          ...devtoolsContext,\n        }),\n        subscribe(({ data, error }) => {\n          setState({ fetching: false, data, error });\n        })\n      );\n    },\n    [args.requestPolicy, client, devtoolsContext, request, setState]\n  );\n\n  useImmediateEffect(() => {\n    if (args.pause) {\n      unsubscribe.current();\n      setState(s => ({ ...s, fetching: false }));\n      return noop;\n    }\n\n    executeQuery();\n    return () => unsubscribe.current(); // eslint-disable-line\n  }, [executeQuery, args.pause, setState]);\n\n  return [state, executeQuery];\n};\n","import { DocumentNode } from 'graphql';\nimport { useCallback, useContext, useEffect, useRef } from 'react';\nimport { pipe, subscribe } from 'wonka';\nimport { Context } from '../context';\nimport { CombinedError, noop } from '../utils';\nimport { useDevtoolsContext } from './useDevtoolsContext';\nimport { useRequest } from './useRequest';\nimport { useImmediateState } from './useImmediateState';\n\nexport interface UseSubscriptionArgs<V> {\n  query: DocumentNode | string;\n  variables?: V;\n}\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\nexport interface UseSubscriptionState<T> {\n  fetching: boolean;\n  data?: T;\n  error?: CombinedError;\n}\n\nexport type UseSubscriptionResponse<T> = [UseSubscriptionState<T>];\n\nexport const useSubscription = <T = any, R = T, V = object>(\n  args: UseSubscriptionArgs<V>,\n  handler?: SubscriptionHandler<T, R>\n): UseSubscriptionResponse<R> => {\n  const devtoolsContext = useDevtoolsContext();\n  const unsubscribe = useRef(noop);\n  const client = useContext(Context);\n\n  const [state, setState] = useImmediateState<UseSubscriptionState<R>>({\n    fetching: true,\n    error: undefined,\n    data: undefined,\n  });\n\n  // This creates a request which will keep a stable reference\n  // if request.key doesn't change\n  const request = useRequest(args.query, args.variables);\n\n  const executeSubscription = useCallback(() => {\n    unsubscribe.current();\n\n    [unsubscribe.current] = pipe(\n      client.executeSubscription(request, devtoolsContext),\n      subscribe(({ data, error }) => {\n        setState(s => ({\n          fetching: true,\n          data: handler !== undefined ? handler(s.data, data) : data,\n          error,\n        }));\n      })\n    );\n  }, [client, devtoolsContext, handler, request, setState]);\n\n  // Trigger subscription on query change\n  // We don't use useImmediateEffect here as we have no way of\n  // unsubscribing from subscriptions during SSR\n  useEffect(() => {\n    executeSubscription();\n    return () => unsubscribe.current(); // eslint-disable-line\n  }, [executeSubscription]);\n\n  return [state];\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ReactElement } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { OperationResult } from '../types';\nimport { useMutation, UseMutationState } from '../hooks';\n\nexport interface MutationProps<T, V> {\n  query: DocumentNode | string;\n  children: (arg: MutationState<T, V>) => ReactElement<any>;\n}\n\nexport interface MutationState<T, V> extends UseMutationState<T> {\n  executeMutation: (variables?: V) => Promise<OperationResult<T>>;\n}\n\nexport function Mutation<T = any, V = any>({\n  children,\n  query,\n}: MutationProps<T, V>): ReactElement<any> {\n  const [state, executeMutation] = useMutation<T, V>(query);\n  return children({ ...state, executeMutation });\n}\n","import { ReactElement } from 'react';\nimport { OperationContext } from '../types';\nimport { useQuery, UseQueryArgs, UseQueryState } from '../hooks';\n\nexport interface QueryProps<T, V> extends UseQueryArgs<V> {\n  children: (arg: QueryState<T>) => ReactElement<any>;\n}\n\nexport interface QueryState<T> extends UseQueryState<T> {\n  executeQuery: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Query<T = any, V = any>({\n  children,\n  ...args\n}: QueryProps<T, V>): ReactElement<any> {\n  const [state, executeQuery] = useQuery<T, V>(args);\n  return children({ ...state, executeQuery });\n}\n","import { ReactElement } from 'react';\n\nimport {\n  useSubscription,\n  UseSubscriptionArgs,\n  UseSubscriptionState,\n  SubscriptionHandler,\n} from '../hooks';\n\nexport interface SubscriptionProps<T, R, V> extends UseSubscriptionArgs<V> {\n  handler?: SubscriptionHandler<T, R>;\n  children: (arg: UseSubscriptionState<R>) => ReactElement<any>;\n}\n\nexport function Subscription<T = any, R = T, V = any>({\n  children,\n  handler,\n  ...args\n}: SubscriptionProps<T, R, V>): ReactElement<any> {\n  const [state] = useSubscription<T, R, V>(args, handler);\n  return children(state);\n}\n"],"names":["const","generateErrorMessage","networkErr","graphQlErrs","error","undefined","message","forEach","err","trim","rehydrateGraphQlError","GraphQLError","nodes","source","positions","path","originalError","extensions","this","CombinedError","ref","normalisedGraphQLErrors","map","networkError","super","name","graphQLErrors","response","toString","Error","hash","x","h","i","l","length","charCodeAt","docNameCache","Object","create","acc","definition","value","getKeyForRequest","query","vars","docKey","doc","__key","definitions","reduce","process","env","NODE_ENV","printed","print","console","warn","key","getKeyForQuery","stringify","createRequest","q","gql","variables","addMetadata","meta","context","isSSR","window","collectTypes","obj","types","Array","isArray","inner","prototype","hasOwnProperty","call","val","push","v","a","indexOf","collectTypesFromResponse","filter","s","kind","formatNode","n","selectionSet","selections","some","formatDocument","astNode","visit","Field","InlineFragment","OperationDefinition","noop","shouldSkip","operationName","serializeResult","result","deserializeResult","operation","deserialized","op","cacheOutcome","cacheExchange","resultCache","Map","operationCache","mapTypeNames","handleAfterMutation","afterMutation","client","handleAfterQuery","afterQuery","isOperationCached","requestPolicy","has","cachedResult","get","reexecuteOperation","data","ops$","sharedOps$","share","cachedOps$","pipe","forwardedOps$","merge","forward","tap","delete","pendingOperations","Set","add","typeName","operations","clear","set","isSubscriptionOperation","log","dedupExchange","inFlightKeys","filterIncomingOperation","isInFlight","afterOperationResult","forward$","fetchExchange","isOperationFetchable","fetchResults$","mergeMap","teardown$","createFetchSource","takeUntil","make","abortController","AbortController","extraOptions","fetchOptions","body","JSON","method","headers","signal","startTime","Date","now","executeFetch","then","next","networkLatency","complete","abort","opts","fetch","res","checkStatus","redirect","json","errors","catch","redirectMode","status","statusText","fallbackExchangeIO","composeExchanges","exchanges","reduceRight","exchange","defaultExchanges","createClient","Client","url","type","createOperationContext","activeOperations","dispatchOperation","createRequestOperation","executeRequestOperation","suspense","makeSubject","operations$","nextOperation","results$","onOperationStart","onOperationEnd","prevActive","operationResults$","onStart","take","result$","onEnd","resolveSuspense","synchronousResult","isCancelled","onPush","end","subscribe","teardown","Promise","resolve","defaultClient","Context","createContext","Provider","Consumer","useImmediateState","init","isMounted","useRef","initialState","useState","current","updateState","useCallback","action","setState","newValue","useLayoutEffect","state","React","isComponentFiber","fiber","tag","isInternalComponent","Component","owner","CurrentOwner","_debugOwner","displayName","LifecycleState","useDevtoolsContext","useMutation","devtoolsContext","useContext","fetching","request","executeMutation","toPromise","useRequest","prev","useMemo","useQuery","args","unsubscribe","executeQuery","effect","changes","WillMount","DidMount","useEffect","Update","useImmediateEffect","pause","useSubscription","handler","executeSubscription","__rest","e","t","p","getOwnPropertySymbols","children","_a","params","isCached","serialized","ssr","restoreData","restore","_extends","extractData","observableish","forwardSubscription","sub","createSubscriptionSource","subscriptionResults$"],"mappings":"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"}