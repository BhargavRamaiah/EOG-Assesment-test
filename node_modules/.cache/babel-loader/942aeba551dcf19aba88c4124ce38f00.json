{"ast":null,"code":"import _slicedToArray from \"/Users/bhargavram/Desktop/eog-react-visualization-assessment-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/bhargavram/Desktop/eog-react-visualization-assessment-master/src/components/Chart.js\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Provider, createClient, useQuery } from \"urql\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Label } from \"recharts\";\nvar client = createClient({\n  url: \"https://react.eogresources.com/graphql\"\n});\nvar measurementQuery = \"\\nquery($input: MeasurementQuery) {\\n  getMeasurements(input: $input) {\\n    metric,\\n    at,\\n    value,\\n    unit\\n  }                                                                                       \\n}\\n\";\nvar useStyles = makeStyles({\n  chartBox: {\n    // overflowX: \"scroll\",\n    padding: \"5px 0\"\n  }\n});\n\nvar getLabel = function getLabel(metricName) {\n  switch (metricName) {\n    case \"tubingPressure\":\n    case \"casingPressure\":\n      return \"PSI\";\n\n    case \"oilTemp\":\n    case \"flareTemp\":\n    case \"waterTemp\":\n      return \"F\";\n\n    case \"injValveOpen\":\n      return \"%\";\n\n    default:\n      return;\n  }\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Chart, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n});\n\nvar Chart = function Chart() {\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var heartBeat = useSelector(function (state) {\n    return state.heartBeat;\n  });\n  var selectedMetric = useSelector(function (state) {\n    return state.selectedMetrics.selectedMetric;\n  });\n  var measurements = useSelector(function (state) {\n    return state.measurements;\n  });\n\n  var _useQuery = useQuery({\n    query: measurementQuery,\n    variables: {\n      input: {\n        metricName: selectedMetric,\n        before: heartBeat.before,\n        after: heartBeat.after\n      }\n    }\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      measurementRes = _useQuery2[0];\n\n  var fetching = measurementRes.fetching,\n      data = measurementRes.data,\n      error = measurementRes.error;\n  useEffect(function () {\n    if (error) {\n      // console.log(error.message);\n      return;\n    }\n\n    if (!data) {\n      return;\n    } else {\n      var getMeasurements = data.getMeasurements;\n      dispatch({\n        type: \"GET_MEASUREMENTS\",\n        payload: getMeasurements\n      });\n    }\n  });\n  if (fetching) return React.createElement(LinearProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  });\n  var metricColors = {\n    tubingPressure: 'green',\n    casingPressure: 'blue',\n    oilTemp: 'purple',\n    flareTemp: 'red',\n    waterTemp: 'teal',\n    injValveOpen: 'black'\n  };\n  var label = getLabel(selectedMetric);\n  return React.createElement(Box, {\n    className: classes.chartBox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, measurements.length ? React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    minWidth: 300,\n    aspect: 16.0 / 9.0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    height: 600,\n    data: measurements,\n    margin: {\n      top: 5,\n      right: 5,\n      left: 5,\n      bottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    domain: [\"auto\", \"auto\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    domain: [\"auto\", \"dataMax + 1\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(Label, {\n    value: label,\n    position: \"insideLeft\",\n    offset: \"-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"value\",\n    stroke: metricColors[selectedMetric],\n    activeDot: {\n      r: 6\n    },\n    dot: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))) : null);\n};","map":{"version":3,"sources":["/Users/bhargavram/Desktop/eog-react-visualization-assessment-master/src/components/Chart.js"],"names":["React","useEffect","useDispatch","useSelector","Provider","createClient","useQuery","makeStyles","Box","LinearProgress","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Label","client","url","measurementQuery","useStyles","chartBox","padding","getLabel","metricName","Chart","classes","dispatch","heartBeat","state","selectedMetric","selectedMetrics","measurements","query","variables","input","before","after","measurementRes","fetching","data","error","getMeasurements","type","payload","metricColors","tubingPressure","casingPressure","oilTemp","flareTemp","waterTemp","injValveOpen","label","length","top","right","left","bottom","r"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Provider, createClient, useQuery } from \"urql\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Label\n} from \"recharts\";\n\nconst client = createClient({\n  url: \"https://react.eogresources.com/graphql\"\n});\n\nconst measurementQuery = `\nquery($input: MeasurementQuery) {\n  getMeasurements(input: $input) {\n    metric,\n    at,\n    value,\n    unit\n  }                                                                                       \n}\n`;\n\nconst useStyles = makeStyles({\n  chartBox: {\n    // overflowX: \"scroll\",\n    padding: \"5px 0\"\n  }\n});\n\nconst getLabel = metricName => {\n  switch (metricName) {\n    case \"tubingPressure\":\n    case \"casingPressure\":\n      return \"PSI\";\n    case \"oilTemp\":\n    case \"flareTemp\":\n    case \"waterTemp\":\n      return \"F\";\n    case \"injValveOpen\":\n      return \"%\";\n    default:\n      return;\n  }\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Chart />\n    </Provider>\n  );\n};\n\nconst Chart = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const heartBeat = useSelector(state => state.heartBeat);\n  const selectedMetric = useSelector(state => state.selectedMetrics.selectedMetric);\n  const measurements = useSelector(state => state.measurements);\n\n  const [measurementRes] = useQuery({\n    query: measurementQuery,\n    variables: {\n      input: {\n        metricName: selectedMetric,\n        before: heartBeat.before,\n        after: heartBeat.after\n      }\n    }\n  });\n\n  const { fetching, data, error } = measurementRes;\n\n  useEffect(() => {\n    if (error) {\n      // console.log(error.message);\n      return;\n    }\n    if (!data) {\n      return;\n    } else {\n      const { getMeasurements } = data;\n      dispatch({\n        type: \"GET_MEASUREMENTS\",\n        payload: getMeasurements\n      });\n    }\n  });\n\n  if (fetching) return <LinearProgress />;\n\n  const metricColors = {\n      tubingPressure: 'green',\n      casingPressure: 'blue',\n      oilTemp: 'purple',\n      flareTemp: 'red',\n      waterTemp: 'teal',\n      injValveOpen: 'black',\n  }\n\n  const label = getLabel(selectedMetric);\n\n  return (\n    <Box className={classes.chartBox}>\n      {measurements.length ? (\n        <ResponsiveContainer width=\"100%\" minWidth={300} aspect={16.0 / 9.0}>\n          <LineChart\n            height={600}\n            data={measurements}\n            margin={{\n              top: 5,\n              right: 5,\n              left: 5,\n              bottom: 5\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis domain={[\"auto\", \"auto\"]} />\n            <YAxis domain={[\"auto\", \"dataMax + 1\"]}>\n              <Label value={label} position='insideLeft' offset='-2' />\n            </YAxis>\n            <Tooltip />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={metricColors[selectedMetric]}\n              activeDot={{ r: 6 }}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      ) : null}\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}