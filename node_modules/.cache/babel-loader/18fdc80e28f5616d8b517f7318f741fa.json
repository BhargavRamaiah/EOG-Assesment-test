{"ast":null,"code":"import { GET_MEASUREMENTS } from \"../actions\"; // import { GET_TUBING_PRESSURE } from \"../actions\";\n// import { GET_CASING_PRESSURE } from \"../actions\";\n// import { GET_OIL_TEMP } from \"../actions\";\n// import { GET_FLARE_TEMP } from \"../actions\";\n// import { GET_WATER_TEMP } from \"../actions\";\n// import { GET_INJ_VALVE_OPEN } from \"../actions\";\n\nvar initialState = {\n  tubingPressure: [],\n  casingPressure: [],\n  oilTemp: [],\n  flareTemp: [],\n  waterTemp: [],\n  injValveOpen: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_MEASUREMENTS:\n      // Convert time in each obj from epoch to hrs/min/sec.\n      var measurements = action.payload; // Hmmm.\n      // measurements.forEach((obj) => {\n      //   let time = new Date(obj.at).toLocaleTimeString(\"en-US\");\n      //   obj.at = time;\n      //   console.log(obj.at);\n      // });\n\n      return measurements;\n    // case GET_TUBING_PRESSURE:\n    //   return {\n    //     ...state,\n    //     tubingPressure: action.payload\n    //   }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/bhargavram/Desktop/eog-react-visualization-assessment-master/src/store/reducers/MeasurementData.js"],"names":["GET_MEASUREMENTS","initialState","tubingPressure","casingPressure","oilTemp","flareTemp","waterTemp","injValveOpen","state","action","type","measurements","payload"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,YAAjC,C,CACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAE,EADG;AAEnBC,EAAAA,cAAc,EAAE,EAFG;AAGnBC,EAAAA,OAAO,EAAE,EAHU;AAInBC,EAAAA,SAAS,EAAE,EAJQ;AAKnBC,EAAAA,SAAS,EAAE,EALQ;AAMnBC,EAAAA,YAAY,EAAE;AANK,CAArB;AASA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,gBAAL;AACE;AACA,UAAIW,YAAY,GAAGF,MAAM,CAACG,OAA1B,CAFF,CAIE;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAOD,YAAP;AACF;AACA;AACA;AACA;AACA;;AACA;AACE,aAAOH,KAAP;AAnBJ;AAqBD,CAtBD","sourcesContent":["import { GET_MEASUREMENTS } from \"../actions\";\n// import { GET_TUBING_PRESSURE } from \"../actions\";\n// import { GET_CASING_PRESSURE } from \"../actions\";\n// import { GET_OIL_TEMP } from \"../actions\";\n// import { GET_FLARE_TEMP } from \"../actions\";\n// import { GET_WATER_TEMP } from \"../actions\";\n// import { GET_INJ_VALVE_OPEN } from \"../actions\";\n\nconst initialState = {\n  tubingPressure: [],\n  casingPressure: [],\n  oilTemp: [],\n  flareTemp: [],\n  waterTemp: [],\n  injValveOpen: []\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_MEASUREMENTS:\n      // Convert time in each obj from epoch to hrs/min/sec.\n      let measurements = action.payload\n\n      // Hmmm.\n      // measurements.forEach((obj) => {\n      //   let time = new Date(obj.at).toLocaleTimeString(\"en-US\");\n      //   obj.at = time;\n      //   console.log(obj.at);\n      // });\n\n      return measurements;\n    // case GET_TUBING_PRESSURE:\n    //   return {\n    //     ...state,\n    //     tubingPressure: action.payload\n    //   }\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}