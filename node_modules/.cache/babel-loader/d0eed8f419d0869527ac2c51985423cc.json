{"ast":null,"code":"var _jsxFileName = \"/Users/bhargavram/Desktop/eog-react-visualization-assessment-master/src/components/MetricSelector.js\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { grey } from \"@material-ui/core/colors\";\nvar useStyles = makeStyles({\n  box: {\n    width: \"166px\",\n    margin: \"5px\"\n  },\n  card: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"64px\",\n    padding: \"0\",\n    width: \"85%\"\n  },\n  cardContent: {\n    padding: 0,\n    \"&:last-child\": {\n      paddingBottom: 0\n    }\n  },\n  cardTitle: {\n    fontSize: \"24px\"\n  },\n  formLabel: {\n    paddingBottom: \"20px\"\n  },\n  formControl: {\n    width: \"100%\",\n    marginBottom: \"40px\"\n  },\n  formGroup: {\n    flexDirection: \"row\",\n    justifyContent: \"center\"\n  },\n  tubingPressure: {\n    color: \"green\"\n  },\n  casingPressure: {\n    color: \"blue\"\n  },\n  oilTemp: {\n    color: \"purple\"\n  },\n  flareTemp: {\n    color: \"red\"\n  },\n  waterTemp: {\n    color: \"teal\"\n  },\n  injValveOpen: {\n    color: \"black\"\n  }\n});\nvar EOGCheckbox = withStyles({\n  root: {\n    color: grey[500],\n    \"&$checked\": {\n      color: grey[900]\n    }\n  },\n  checked: {}\n})(function (props) {\n  return React.createElement(Checkbox, Object.assign({\n    color: \"default\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }));\n});\nvar metricArray = [{\n  value: \"tubingPressure\",\n  label: \"Tubing Pressure\",\n  color: \"\"\n}, {\n  value: \"casingPressure\",\n  label: \"Casing Pressure\"\n}, {\n  value: \"oilTemp\",\n  label: \"Oil Temp\"\n}, {\n  value: \"flareTemp\",\n  label: \"Flare Temp\"\n}, {\n  value: \"waterTemp\",\n  label: \"Water Temp\"\n}, {\n  value: \"injValveOpen\",\n  label: \"Inj Valve Open\"\n}];\nexport default (function () {\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var selectedMetric = useSelector(function (state) {\n    return state.selectedMetrics.selectedMetric;\n  });\n  var measurements = useSelector(function (state) {\n    return state.measurements;\n  });\n  return React.createElement(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    component: \"legend\",\n    className: classes.formLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Select metric:\"), React.createElement(FormGroup, {\n    className: classes.formGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, metricArray.map(function (metric, i) {\n    var isChecked = metric.value === selectedMetric;\n    return React.createElement(Box, {\n      className: classes.box,\n      key: \"metric\".concat(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      control: React.createElement(EOGCheckbox // checked={selectedMetrics[metric.value]}\n      , {\n        checked: isChecked,\n        onChange: function onChange() {\n          return dispatch({\n            type: \"SELECT_METRIC\",\n            payload: metric.value\n          });\n        },\n        value: metric.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }),\n      label: metric.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), isChecked ? React.createElement(Card, {\n      className: classes.card,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      className: classes.cardContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.cardTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: classes[selectedMetric],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, measurements.length ? measurements[measurements.length - 1].value : React.createElement(React.Fragment, null, \"...\"))))) : null);\n  })));\n});","map":{"version":3,"sources":["/Users/bhargavram/Desktop/eog-react-visualization-assessment-master/src/components/MetricSelector.js"],"names":["React","useDispatch","useSelector","makeStyles","withStyles","Box","Card","CardContent","FormLabel","FormControl","FormGroup","FormControlLabel","Checkbox","Typography","grey","useStyles","box","width","margin","card","display","justifyContent","alignItems","height","padding","cardContent","paddingBottom","cardTitle","fontSize","formLabel","formControl","marginBottom","formGroup","flexDirection","tubingPressure","color","casingPressure","oilTemp","flareTemp","waterTemp","injValveOpen","EOGCheckbox","root","checked","props","metricArray","value","label","classes","dispatch","selectedMetric","state","selectedMetrics","measurements","map","metric","i","isChecked","type","payload","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,0BAAvC;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,IAAT,QAAqB,0BAArB;AAEA,IAAMC,SAAS,GAAGZ,UAAU,CAAC;AAC3Ba,EAAAA,GAAG,EAAE;AACHC,IAAAA,KAAK,EAAE,OADJ;AAEHC,IAAAA,MAAM,EAAE;AAFL,GADsB;AAK3BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,cAAc,EAAE,QAFZ;AAGJC,IAAAA,UAAU,EAAE,QAHR;AAIJC,IAAAA,MAAM,EAAE,MAJJ;AAKJC,IAAAA,OAAO,EAAE,GALL;AAMJP,IAAAA,KAAK,EAAE;AANH,GALqB;AAa3BQ,EAAAA,WAAW,EAAE;AACXD,IAAAA,OAAO,EAAE,CADE;AAEX,oBAAgB;AACdE,MAAAA,aAAa,EAAE;AADD;AAFL,GAbc;AAmB3BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE;AADD,GAnBgB;AAsB3BC,EAAAA,SAAS,EAAE;AACTH,IAAAA,aAAa,EAAE;AADN,GAtBgB;AAyB3BI,EAAAA,WAAW,EAAE;AACXb,IAAAA,KAAK,EAAE,MADI;AAEXc,IAAAA,YAAY,EAAE;AAFH,GAzBc;AA6B3BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EAAE,KADN;AAETZ,IAAAA,cAAc,EAAE;AAFP,GA7BgB;AAiC3Ba,EAAAA,cAAc,EAAE;AACdC,IAAAA,KAAK,EAAE;AADO,GAjCW;AAoC3BC,EAAAA,cAAc,EAAE;AACdD,IAAAA,KAAK,EAAE;AADO,GApCW;AAuC3BE,EAAAA,OAAO,EAAE;AACPF,IAAAA,KAAK,EAAE;AADA,GAvCkB;AA0C3BG,EAAAA,SAAS,EAAE;AACTH,IAAAA,KAAK,EAAE;AADE,GA1CgB;AA6C3BI,EAAAA,SAAS,EAAE;AACTJ,IAAAA,KAAK,EAAE;AADE,GA7CgB;AAgD3BK,EAAAA,YAAY,EAAE;AACZL,IAAAA,KAAK,EAAE;AADK;AAhDa,CAAD,CAA5B;AAqDA,IAAMM,WAAW,GAAGrC,UAAU,CAAC;AAC7BsC,EAAAA,IAAI,EAAE;AACJP,IAAAA,KAAK,EAAErB,IAAI,CAAC,GAAD,CADP;AAEJ,iBAAa;AACXqB,MAAAA,KAAK,EAAErB,IAAI,CAAC,GAAD;AADA;AAFT,GADuB;AAO7B6B,EAAAA,OAAO,EAAE;AAPoB,CAAD,CAAV,CAQjB,UAAAC,KAAK;AAAA,SAAI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC;AAAhB,KAA8BA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;AAAA,CARY,CAApB;AAUA,IAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEZ,EAAAA,KAAK,EAAE;AAHT,CADkB,EAMlB;AACEW,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CANkB,EAUlB;AACED,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAVkB,EAclB;AACED,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAdkB,EAkBlB;AACED,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAlBkB,EAsBlB;AACED,EAAAA,KAAK,EAAE,cADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAtBkB,CAApB;AA4BA,gBAAe,YAAM;AACnB,MAAMC,OAAO,GAAGjC,SAAS,EAAzB;AACA,MAAMkC,QAAQ,GAAGhD,WAAW,EAA5B;AACA,MAAMiD,cAAc,GAAGhD,WAAW,CAChC,UAAAiD,KAAK;AAAA,WAAIA,KAAK,CAACC,eAAN,CAAsBF,cAA1B;AAAA,GAD2B,CAAlC;AAGA,MAAMG,YAAY,GAAGnD,WAAW,CAAC,UAAAiD,KAAK;AAAA,WAAIA,KAAK,CAACE,YAAV;AAAA,GAAN,CAAhC;AAEA,SACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,UAAvB;AAAkC,IAAA,SAAS,EAAEL,OAAO,CAAClB,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,QAArB;AAA8B,IAAA,SAAS,EAAEkB,OAAO,CAACnB,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAIE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEmB,OAAO,CAAChB,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGa,WAAW,CAACS,GAAZ,CAAgB,UAACC,MAAD,EAASC,CAAT,EAAe;AAC9B,QAAMC,SAAS,GAAGF,MAAM,CAACT,KAAP,KAAiBI,cAAnC;AACA,WACE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAEF,OAAO,CAAChC,GAAxB;AAA6B,MAAA,GAAG,kBAAWwC,CAAX,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AACE,MAAA,OAAO,EACL,oBAAC,WAAD,CACE;AADF;AAEE,QAAA,OAAO,EAAEC,SAFX;AAGE,QAAA,QAAQ,EAAE;AAAA,iBACRR,QAAQ,CAAC;AACPS,YAAAA,IAAI,EAAE,eADC;AAEPC,YAAAA,OAAO,EAAEJ,MAAM,CAACT;AAFT,WAAD,CADA;AAAA,SAHZ;AASE,QAAA,KAAK,EAAES,MAAM,CAACT,KAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ;AAcE,MAAA,KAAK,EAAES,MAAM,CAACR,KAdhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAiBGU,SAAS,GACR,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAET,OAAO,CAAC7B,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAE6B,OAAO,CAACvB,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEuB,OAAO,CAACrB,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAEqB,OAAO,CAACE,cAAD,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGG,YAAY,CAACO,MAAb,GACCP,YAAY,CAACA,YAAY,CAACO,MAAb,GAAsB,CAAvB,CAAZ,CAAsCd,KADvC,GAGC,gDAJJ,CADF,CADF,CADF,CADQ,GAcN,IA/BN,CADF;AAmCD,GArCA,CADH,CAJF,CADF;AA+CD,CAvDD","sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { grey } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles({\n  box: {\n    width: \"166px\",\n    margin: \"5px\"\n  },\n  card: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"64px\",\n    padding: \"0\",\n    width: \"85%\"\n  },\n  cardContent: {\n    padding: 0,\n    \"&:last-child\": {\n      paddingBottom: 0\n    }\n  },\n  cardTitle: {\n    fontSize: \"24px\"\n  },\n  formLabel: {\n    paddingBottom: \"20px\"\n  },\n  formControl: {\n    width: \"100%\",\n    marginBottom: \"40px\"\n  },\n  formGroup: {\n    flexDirection: \"row\",\n    justifyContent: \"center\"\n  },\n  tubingPressure: {\n    color: \"green\"\n  },\n  casingPressure: {\n    color: \"blue\"\n  },\n  oilTemp: {\n    color: \"purple\"\n  },\n  flareTemp: {\n    color: \"red\"\n  },\n  waterTemp: {\n    color: \"teal\"\n  },\n  injValveOpen: {\n    color: \"black\"\n  }\n});\n\nconst EOGCheckbox = withStyles({\n  root: {\n    color: grey[500],\n    \"&$checked\": {\n      color: grey[900]\n    }\n  },\n  checked: {}\n})(props => <Checkbox color=\"default\" {...props} />);\n\nconst metricArray = [\n  {\n    value: \"tubingPressure\",\n    label: \"Tubing Pressure\",\n    color: \"\"\n  },\n  {\n    value: \"casingPressure\",\n    label: \"Casing Pressure\"\n  },\n  {\n    value: \"oilTemp\",\n    label: \"Oil Temp\"\n  },\n  {\n    value: \"flareTemp\",\n    label: \"Flare Temp\"\n  },\n  {\n    value: \"waterTemp\",\n    label: \"Water Temp\"\n  },\n  {\n    value: \"injValveOpen\",\n    label: \"Inj Valve Open\"\n  }\n];\n\nexport default () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const selectedMetric = useSelector(\n    state => state.selectedMetrics.selectedMetric\n  );\n  const measurements = useSelector(state => state.measurements);\n\n  return (\n    <FormControl component=\"fieldset\" className={classes.formControl}>\n      <FormLabel component=\"legend\" className={classes.formLabel}>\n        Select metric:\n      </FormLabel>\n      <FormGroup className={classes.formGroup}>\n        {metricArray.map((metric, i) => {\n          const isChecked = metric.value === selectedMetric;\n          return (\n            <Box className={classes.box} key={`metric${i}`}>\n              <FormControlLabel\n                control={\n                  <EOGCheckbox\n                    // checked={selectedMetrics[metric.value]}\n                    checked={isChecked}\n                    onChange={() =>\n                      dispatch({\n                        type: \"SELECT_METRIC\",\n                        payload: metric.value\n                      })\n                    }\n                    value={metric.value}\n                  />\n                }\n                label={metric.label}\n              />\n              {isChecked ? (\n                <Card className={classes.card}>\n                  <CardContent className={classes.cardContent}>\n                    <Typography className={classes.cardTitle}>\n                      <span className={classes[selectedMetric]}>\n                        {measurements.length ? (\n                          measurements[measurements.length - 1].value\n                        ) : (\n                          <>...</>\n                        )}\n                      </span>\n                    </Typography>\n                  </CardContent>\n                </Card>\n              ) : null}\n            </Box>\n          );\n        })}\n      </FormGroup>\n    </FormControl>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}