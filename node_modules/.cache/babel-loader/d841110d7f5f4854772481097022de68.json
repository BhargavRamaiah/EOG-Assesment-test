{"ast":null,"code":"import { make, pipe, onPush, onEnd, subscribe, share, filter, map, tap, merge, mergeMap, takeUntil, makeSubject, onStart, take, toPromise } from \"wonka\";\nimport { GraphQLError, print, visit } from \"graphql\";\nimport stringify from \"fast-json-stable-stringify\";\nimport gql from \"graphql-tag\";\nimport { createContext, useRef, useState, useCallback, useLayoutEffect, useMemo, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, useContext, useEffect } from \"react\";\n\nfunction _extends() {\n  return (_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  }).apply(this, arguments);\n}\n\nvar generateErrorMessage = function generateErrorMessage(networkErr, graphQlErrs) {\n  var error = \"\";\n\n  if (void 0 !== networkErr) {\n    return error = \"[Network] \" + networkErr.message;\n  }\n\n  if (void 0 !== graphQlErrs) {\n    graphQlErrs.forEach(function _ref(err) {\n      error += \"[GraphQL] \" + err.message + \"\\n\";\n    });\n  }\n\n  return error.trim();\n};\n\nvar rehydrateGraphQlError = function rehydrateGraphQlError(error) {\n  if (\"string\" == typeof error) {\n    return new GraphQLError(error);\n  } else if (\"object\" == typeof error && error.message) {\n    return new GraphQLError(error.message, error.nodes, error.source, error.positions, error.path, error.originalError, error.extensions || {});\n  } else {\n    return error;\n  }\n};\n\nfunction _toString() {\n  return this.message;\n}\n\nvar CombinedError = function (Error) {\n  function CombinedError(ref) {\n    var networkError = ref.networkError;\n    var response = ref.response;\n    var normalisedGraphQLErrors = (ref.graphQLErrors || []).map(rehydrateGraphQlError);\n    var message = generateErrorMessage(networkError, normalisedGraphQLErrors);\n    Error.call(this, message);\n    this.name = \"CombinedError\";\n    this.message = message;\n    this.graphQLErrors = normalisedGraphQLErrors;\n    this.networkError = networkError;\n    this.response = response;\n  }\n\n  if (Error) {\n    CombinedError.__proto__ = Error;\n  }\n\n  (CombinedError.prototype = Object.create(Error && Error.prototype)).constructor = CombinedError;\n  CombinedError.prototype.toString = _toString;\n  return CombinedError;\n}(Error);\n\nvar hash = function hash(x) {\n  for (var h = 5381, i = 0, l = 0 | x.length; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h >>> 0;\n};\n\nvar docNameCache = Object.create(null);\n\nfunction _ref(acc, definition) {\n  return acc + (void 0 !== definition.name ? definition.name.value : \"\");\n}\n\nvar getKeyForRequest = function getKeyForRequest(query, vars) {\n  var docKey = function (doc) {\n    if (void 0 !== doc.__key) {\n      return doc.__key;\n    }\n\n    var name = doc.definitions.reduce(_ref, \"\");\n\n    if (\"production\" !== process.env.NODE_ENV && \"\" !== name) {\n      var printed = print(doc);\n\n      if (!(name in docNameCache)) {\n        docNameCache[name] = printed;\n      } else if (docNameCache[name] !== printed) {\n        console.warn(\"Warning: Encountered multiple DocumentNodes with the same name.\");\n      }\n    }\n\n    if (\"\" === name) {\n      name = print(doc);\n    }\n\n    var key = hash(name);\n    doc.__key = key;\n    return key;\n  }(query);\n\n  if (null == vars) {\n    return docKey;\n  }\n\n  return hash(\"\" + docKey + stringify(vars));\n};\n\nvar createRequest = function createRequest(q, vars) {\n  var query = \"string\" == typeof q ? gql([q]) : q;\n  return {\n    key: getKeyForRequest(query, vars),\n    query: query,\n    variables: vars || {}\n  };\n};\n\nvar addMetadata = function addMetadata(source, meta) {\n  return _extends({}, source, {\n    context: _extends({}, source.context, {\n      meta: _extends({}, source.context.meta, meta)\n    })\n  });\n};\n\nvar isSSR = \"undefined\" == typeof window || !(\"HTMLElement\" in window);\n\nvar collectTypes = function collectTypes(obj, types) {\n  if (void 0 === types) {\n    types = [];\n  }\n\n  if (Array.isArray(obj)) {\n    obj.forEach(function _ref(inner) {\n      return collectTypes(inner, types);\n    });\n  } else if (\"object\" == typeof obj && null !== obj) {\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var val = obj[key];\n\n        if (\"__typename\" === key && \"string\" == typeof val) {\n          types.push(val);\n        } else if (\"object\" == typeof val && null !== val) {\n          collectTypes(val, types);\n        }\n      }\n    }\n  }\n\n  return types;\n};\n\nfunction _ref2(v, i, a) {\n  return a.indexOf(v) === i;\n}\n\nvar collectTypesFromResponse = function collectTypesFromResponse(response) {\n  return collectTypes(response).filter(_ref2);\n};\n\nfunction _ref3(s) {\n  return \"Field\" === s.kind && \"__typename\" === s.name.value;\n}\n\nvar formatNode = function formatNode(n) {\n  if (void 0 === n.selectionSet) {\n    return !1;\n  }\n\n  if (n.selectionSet.selections.some(_ref3)) {\n    return n;\n  }\n\n  return _extends({}, n, {\n    selectionSet: _extends({}, n.selectionSet, {\n      selections: n.selectionSet.selections.concat([{\n        kind: \"Field\",\n        name: {\n          kind: \"Name\",\n          value: \"__typename\"\n        }\n      }])\n    })\n  });\n};\n\nvar formatDocument = function formatDocument(astNode) {\n  return visit(astNode, {\n    Field: formatNode,\n    InlineFragment: formatNode,\n    OperationDefinition: formatNode\n  });\n};\n\nvar noop = function noop() {};\n\nvar shouldSkip = function shouldSkip(ref) {\n  var operationName = ref.operationName;\n  return \"subscription\" !== operationName && \"query\" !== operationName;\n};\n\nfunction _ref$1(x) {\n  return \"\" + x;\n}\n\nvar serializeResult = function serializeResult(ref) {\n  var error = ref.error;\n  var result = {\n    data: ref.data,\n    error: void 0\n  };\n\n  if (void 0 !== error) {\n    result.error = {\n      networkError: \"\" + error.networkError,\n      graphQLErrors: error.graphQLErrors.map(_ref$1)\n    };\n  }\n\n  return result;\n};\n\nvar deserializeResult = function deserializeResult(operation, result) {\n  var error = result.error;\n  var deserialized = {\n    operation: operation,\n    data: result.data,\n    error: void 0\n  };\n\n  if (void 0 !== error) {\n    deserialized.error = new CombinedError({\n      networkError: new Error(error.networkError),\n      graphQLErrors: error.graphQLErrors\n    });\n  }\n\n  return deserialized;\n};\n\nvar ssrExchange = function ssrExchange(params) {\n  var data = {};\n\n  var isCached = function isCached(operation) {\n    return !shouldSkip(operation) && void 0 !== data[operation.key];\n  };\n\n  function _ref2(op) {\n    return !isCached(op);\n  }\n\n  function _ref3(op) {\n    return isCached(op);\n  }\n\n  function _ref4(op) {\n    return deserializeResult(op, data[op.key]);\n  }\n\n  function _ref5(result) {\n    var operation = result.operation;\n\n    if (!shouldSkip(operation)) {\n      var serialized = serializeResult(result);\n      data[operation.key] = serialized;\n    }\n  }\n\n  function _ref6(result) {\n    delete data[result.operation.key];\n  }\n\n  var ssr = function ssr(ref) {\n    var client = ref.client;\n    var forward = ref.forward;\n    return function (ops$) {\n      var sharedOps$ = share(ops$);\n      var forwardedOps$ = pipe(sharedOps$, filter(_ref2), forward);\n      var cachedOps$ = pipe(sharedOps$, filter(_ref3), map(_ref4));\n\n      if (client.suspense) {\n        forwardedOps$ = pipe(forwardedOps$, tap(_ref5));\n      } else {\n        cachedOps$ = pipe(cachedOps$, tap(_ref6));\n      }\n\n      return merge([forwardedOps$, cachedOps$]);\n    };\n  };\n\n  ssr.restoreData = function (restore) {\n    return _extends(data, restore);\n  };\n\n  ssr.extractData = function () {\n    return _extends({}, data);\n  };\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n\nvar shouldSkip$1 = function shouldSkip$1(ref) {\n  var operationName = ref.operationName;\n  return \"mutation\" !== operationName && \"query\" !== operationName;\n};\n\nfunction _ref$2(operation) {\n  return _extends({}, operation, {\n    query: formatDocument(operation.query)\n  });\n}\n\nfunction _ref5(op) {\n  return shouldSkip$1(op);\n}\n\nfunction _ref6(op) {\n  return addMetadata(op, {\n    cacheOutcome: \"miss\"\n  });\n}\n\nvar cacheExchange = function cacheExchange(ref) {\n  var forward = ref.forward;\n  var client = ref.client;\n  var resultCache = new Map();\n  var operationCache = Object.create(null);\n  var mapTypeNames = _ref$2;\n  var handleAfterMutation = afterMutation(resultCache, operationCache, client);\n  var handleAfterQuery = afterQuery(resultCache, operationCache);\n\n  var isOperationCached = function isOperationCached(operation) {\n    var requestPolicy = operation.context.requestPolicy;\n    return \"query\" === operation.operationName && \"network-only\" !== requestPolicy && (\"cache-only\" === requestPolicy || resultCache.has(operation.key));\n  };\n\n  function _ref2(op) {\n    return !shouldSkip$1(op) && isOperationCached(op);\n  }\n\n  function _ref3(operation) {\n    var context = operation.context;\n    var cachedResult = resultCache.get(operation.key);\n\n    if (\"cache-and-network\" === context.requestPolicy) {\n      reexecuteOperation(client, operation);\n    }\n\n    if (void 0 !== cachedResult) {\n      return _extends({}, cachedResult, {\n        operation: addMetadata(cachedResult.operation, {\n          cacheOutcome: \"hit\"\n        })\n      });\n    }\n\n    return {\n      data: void 0,\n      error: void 0,\n      operation: addMetadata(operation, {\n        cacheOutcome: \"miss\"\n      })\n    };\n  }\n\n  function _ref4(op) {\n    return !shouldSkip$1(op) && !isOperationCached(op);\n  }\n\n  function _ref7(response) {\n    if (response.operation && \"mutation\" === response.operation.operationName) {\n      handleAfterMutation(response);\n    } else if (response.operation && \"query\" === response.operation.operationName) {\n      handleAfterQuery(response);\n    }\n  }\n\n  return function (ops$) {\n    var sharedOps$ = share(ops$);\n    var cachedOps$ = pipe(sharedOps$, filter(_ref2), map(_ref3));\n    var forwardedOps$ = pipe(merge([pipe(sharedOps$, filter(_ref4), map(mapTypeNames)), pipe(sharedOps$, filter(_ref5))]), map(_ref6), forward, tap(_ref7));\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\nvar reexecuteOperation = function reexecuteOperation(client, operation) {\n  return client.reexecuteOperation(_extends({}, operation, {\n    context: _extends({}, operation.context, {\n      requestPolicy: \"network-only\"\n    })\n  }));\n};\n\nvar afterMutation = function afterMutation(resultCache, operationCache, client) {\n  function _ref9(key) {\n    if (resultCache.has(key)) {\n      var operation = resultCache.get(key).operation;\n      resultCache.delete(key);\n      reexecuteOperation(client, operation);\n    }\n  }\n\n  return function (response) {\n    var pendingOperations = new Set();\n\n    function _ref8(key) {\n      return pendingOperations.add(key);\n    }\n\n    collectTypesFromResponse(response.data).forEach(function (typeName) {\n      var operations = operationCache[typeName] || (operationCache[typeName] = new Set());\n      operations.forEach(_ref8);\n      operations.clear();\n    });\n    pendingOperations.forEach(_ref9);\n  };\n};\n\nvar afterQuery = function afterQuery(resultCache, operationCache) {\n  return function (response) {\n    var operation = response.operation;\n\n    if (void 0 === response.data) {\n      return;\n    }\n\n    resultCache.set(operation.key, response);\n    collectTypesFromResponse(response.data).forEach(function (typeName) {\n      (operationCache[typeName] || (operationCache[typeName] = new Set())).add(operation.key);\n    });\n  };\n};\n\nvar isSubscriptionOperation = function isSubscriptionOperation(operation) {\n  return \"subscription\" === operation.operationName;\n};\n\nfunction _ref2$1(op) {\n  return !isSubscriptionOperation(op);\n}\n\nvar subscriptionExchange = function subscriptionExchange(ref) {\n  var forwardSubscription = ref.forwardSubscription;\n\n  function _ref(operation) {\n    var observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables,\n      context: _extends({}, operation.context)\n    });\n    return make(function (ref) {\n      var _next = ref[0];\n      var sub = observableish.subscribe({\n        next: function next(result) {\n          return _next({\n            operation: operation,\n            data: result.data || void 0,\n            error: Array.isArray(result.errors) ? new CombinedError({\n              graphQLErrors: result.errors,\n              response: void 0\n            }) : void 0\n          });\n        },\n        error: function error(err) {\n          return _next({\n            operation: operation,\n            data: void 0,\n            error: new CombinedError({\n              networkError: err,\n              response: void 0\n            })\n          });\n        },\n        complete: ref[1]\n      });\n      return function () {\n        return sub.unsubscribe();\n      };\n    });\n  }\n\n  return function (ref) {\n    var forward = ref.forward;\n    var createSubscriptionSource = _ref;\n    return function (ops$) {\n      var sharedOps$ = share(ops$);\n      var subscriptionResults$ = pipe(sharedOps$, filter(isSubscriptionOperation), mergeMap(function (operation) {\n        var key = operation.key;\n        var teardown$ = pipe(sharedOps$, filter(function (op) {\n          return \"teardown\" === op.operationName && op.key === key;\n        }));\n        return pipe(createSubscriptionSource(operation), takeUntil(teardown$));\n      }));\n      var forward$ = pipe(sharedOps$, filter(_ref2$1), forward);\n      return merge([subscriptionResults$, forward$]);\n    };\n  };\n};\n\nfunction _ref$3(op) {\n  return console.log(\"[Exchange debug]: Incoming operation: \", op);\n}\n\nfunction _ref2$2(result) {\n  return console.log(\"[Exchange debug]: Completed operation: \", result);\n}\n\nvar debugExchange = function debugExchange(ref) {\n  var forward = ref.forward;\n  return function (ops$) {\n    return pipe(ops$, tap(_ref$3), forward, tap(_ref2$2));\n  };\n};\n\nvar dedupExchange = function dedupExchange(ref) {\n  var forward = ref.forward;\n  var inFlightKeys = new Set();\n\n  var filterIncomingOperation = function filterIncomingOperation(operation) {\n    var key = operation.key;\n    var operationName = operation.operationName;\n\n    if (\"teardown\" === operationName) {\n      inFlightKeys.delete(key);\n      return !0;\n    } else if (\"query\" !== operationName) {\n      return !0;\n    }\n\n    var isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n    return !isInFlight;\n  };\n\n  var afterOperationResult = function afterOperationResult(ref) {\n    inFlightKeys.delete(ref.operation.key);\n  };\n\n  return function (ops$) {\n    var forward$ = pipe(ops$, filter(filterIncomingOperation));\n    return pipe(forward(forward$), tap(afterOperationResult));\n  };\n};\n\nfunction _ref$4(operation) {\n  var operationName = operation.operationName;\n  return \"query\" === operationName || \"mutation\" === operationName;\n}\n\nvar fetchExchange = function fetchExchange(ref) {\n  var forward = ref.forward;\n  var isOperationFetchable = _ref$4;\n\n  function _ref2(op) {\n    return !isOperationFetchable(op);\n  }\n\n  return function (ops$) {\n    var sharedOps$ = share(ops$);\n    var fetchResults$ = pipe(sharedOps$, filter(isOperationFetchable), mergeMap(function (operation) {\n      var key = operation.key;\n      var teardown$ = pipe(sharedOps$, filter(function (op) {\n        return \"teardown\" === op.operationName && op.key === key;\n      }));\n      return pipe(createFetchSource(operation), takeUntil(teardown$));\n    }));\n    var forward$ = pipe(sharedOps$, filter(_ref2), forward);\n    return merge([fetchResults$, forward$]);\n  };\n};\n\nvar createFetchSource = function createFetchSource(operation) {\n  if (\"subscription\" === operation.operationName) {\n    throw new Error(\"Received a subscription operation in the httpExchange. You are probably trying to create a subscription. Have you added a subscriptionExchange?\");\n  }\n\n  return make(function (ref) {\n    var next = ref[0];\n    var complete = ref[1];\n    var abortController = \"undefined\" != typeof AbortController ? new AbortController() : void 0;\n    var context = operation.context;\n    var extraOptions = \"function\" == typeof context.fetchOptions ? context.fetchOptions() : context.fetchOptions || {};\n\n    var fetchOptions = _extends({\n      body: JSON.stringify({\n        query: print(operation.query),\n        variables: operation.variables\n      }),\n      method: \"POST\"\n    }, extraOptions, {\n      headers: _extends({\n        \"content-type\": \"application/json\"\n      }, extraOptions.headers),\n      signal: void 0 !== abortController ? abortController.signal : void 0\n    });\n\n    var startTime = Date.now();\n    executeFetch(operation, fetchOptions).then(function (result) {\n      if (void 0 !== result) {\n        next(_extends({}, result, {\n          operation: addMetadata(result.operation, {\n            networkLatency: Date.now() - startTime\n          })\n        }));\n      }\n\n      complete();\n    });\n    return function () {\n      if (void 0 !== abortController) {\n        abortController.abort();\n      }\n    };\n  });\n};\n\nvar executeFetch = function executeFetch(operation, opts) {\n  var response;\n  return fetch(operation.context.url, opts).then(function (res) {\n    checkStatus(opts.redirect, response = res);\n    return response.json();\n  }).then(function (result) {\n    return {\n      operation: operation,\n      data: result.data,\n      error: Array.isArray(result.errors) ? new CombinedError({\n        graphQLErrors: result.errors,\n        response: response\n      }) : void 0\n    };\n  }).catch(function (err) {\n    if (\"AbortError\" === err.name) {\n      return;\n    }\n\n    return {\n      operation: operation,\n      data: void 0,\n      error: new CombinedError({\n        networkError: err,\n        response: response\n      })\n    };\n  });\n};\n\nvar checkStatus = function checkStatus(redirectMode, response) {\n  if (void 0 === redirectMode) {\n    redirectMode = \"follow\";\n  }\n\n  if (response.status < 200 || response.status >= (\"manual\" === redirectMode ? 400 : 300)) {\n    throw new Error(response.statusText);\n  }\n};\n\nfunction _ref$5(ref) {\n  var operationName = ref.operationName;\n\n  if (\"teardown\" !== operationName && \"production\" !== process.env.NODE_ENV) {\n    console.warn('No exchange has handled operations of type \"' + operationName + \"\\\". Check whether you've added an exchange responsible for these operations.\");\n  }\n}\n\nfunction _ref2$3() {\n  return !1;\n}\n\nvar fallbackExchangeIO = function fallbackExchangeIO(ops$) {\n  return pipe(ops$, tap(_ref$5), filter(_ref2$3));\n};\n\nvar composeExchanges = function composeExchanges(exchanges) {\n  if (1 === exchanges.length) {\n    return exchanges[0];\n  }\n\n  return function (ref) {\n    var client = ref.client;\n    return exchanges.reduceRight(function (forward, exchange) {\n      return exchange({\n        client: client,\n        forward: forward\n      });\n    }, ref.forward);\n  };\n};\n\nvar defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n\nvar createClient = function createClient(opts) {\n  return new Client(opts);\n};\n\nvar Client = function Client(opts) {\n  var this$1 = this;\n  this.activeOperations = Object.create(null);\n\n  this.createOperationContext = function (opts) {\n    var requestPolicy = (opts || {}).requestPolicy;\n\n    if (void 0 === requestPolicy) {\n      requestPolicy = \"cache-first\";\n    }\n\n    return _extends({\n      url: this$1.url,\n      fetchOptions: this$1.fetchOptions\n    }, opts, {\n      requestPolicy: requestPolicy\n    });\n  };\n\n  this.createRequestOperation = function (type, ref, opts) {\n    return {\n      key: ref.key,\n      query: ref.query,\n      variables: ref.variables,\n      operationName: type,\n      context: this$1.createOperationContext(opts)\n    };\n  };\n\n  this.reexecuteOperation = function (operation) {\n    if ((this$1.activeOperations[operation.key] || 0) > 0) {\n      this$1.dispatchOperation(operation);\n    }\n  };\n\n  this.executeQuery = function (query, opts) {\n    var operation = this$1.createRequestOperation(\"query\", query, opts);\n    return this$1.executeRequestOperation(operation);\n  };\n\n  this.executeSubscription = function (query, opts) {\n    var operation = this$1.createRequestOperation(\"subscription\", query, opts);\n    return this$1.executeRequestOperation(operation);\n  };\n\n  this.executeMutation = function (query, opts) {\n    var operation = this$1.createRequestOperation(\"mutation\", query, opts);\n    return this$1.executeRequestOperation(operation);\n  };\n\n  this.url = opts.url;\n  this.fetchOptions = opts.fetchOptions;\n  this.suspense = !!opts.suspense;\n  var ref = makeSubject();\n  var nextOperation = ref[1];\n  this.operations$ = ref[0];\n  this.dispatchOperation = nextOperation;\n  this.exchange = composeExchanges(void 0 !== opts.exchanges ? opts.exchanges : defaultExchanges);\n  this.results$ = share(this.exchange({\n    client: this,\n    forward: fallbackExchangeIO\n  })(this.operations$));\n};\n\nClient.prototype.onOperationStart = function onOperationStart(operation) {\n  var key = operation.key;\n  this.activeOperations[key] = (this.activeOperations[key] || 0) + 1;\n  this.dispatchOperation(operation);\n};\n\nClient.prototype.onOperationEnd = function onOperationEnd(operation) {\n  var key = operation.key;\n  var prevActive = this.activeOperations[key] || 0;\n\n  if ((this.activeOperations[key] = prevActive <= 0 ? 0 : prevActive - 1) <= 0) {\n    this.dispatchOperation(_extends({}, operation, {\n      operationName: \"teardown\"\n    }));\n  }\n};\n\nClient.prototype.executeRequestOperation = function executeRequestOperation(operation) {\n  var this$1 = this;\n  var key = operation.key;\n  var operationName = operation.operationName;\n  var operationResults$ = pipe(this.results$, filter(function (res) {\n    return res.operation.key === key;\n  }));\n\n  if (\"mutation\" === operationName) {\n    return pipe(operationResults$, onStart(function _ref() {\n      return this$1.dispatchOperation(operation);\n    }), take(1));\n  }\n\n  var result$ = pipe(operationResults$, onStart(function () {\n    return this$1.onOperationStart(operation);\n  }), onEnd(function () {\n    return this$1.onOperationEnd(operation);\n  }));\n  return this.suspense ? (source = result$, make(function (ref) {\n    var end = ref[1];\n    var isCancelled = !1;\n    var resolveSuspense;\n    var synchronousResult;\n    var teardown = pipe(source, onPush(ref[0]), onEnd(end), subscribe(function (value) {\n      if (void 0 === resolveSuspense) {\n        synchronousResult = value;\n      } else if (!isCancelled) {\n        resolveSuspense(value);\n        end();\n        teardown();\n      }\n    }))[0];\n\n    if (void 0 === synchronousResult) {\n      throw new Promise(function _ref(resolve) {\n        resolveSuspense = resolve;\n      });\n    }\n\n    return function () {\n      isCancelled = !0;\n      teardown();\n    };\n  })) : result$;\n  var source;\n};\n\nvar Context = createContext(createClient({\n  url: \"/graphql\"\n}));\nvar Provider = Context.Provider;\nvar Consumer = Context.Consumer;\n\nvar useImmediateState = function useImmediateState(init) {\n  var isMounted = useRef(!1);\n  var initialState = useRef(_extends({}, init));\n  var ref = useState(initialState.current);\n  var state = ref[0];\n  var setState = ref[1];\n  var updateState = useCallback(function (action) {\n    if (!isMounted.current) {\n      var newValue = \"function\" == typeof action ? action(initialState.current) : action;\n\n      _extends(initialState.current, newValue);\n    } else {\n      setState(action);\n    }\n  }, []);\n\n  function _ref() {\n    isMounted.current = !1;\n  }\n\n  !isSSR && useLayoutEffect(function () {\n    isMounted.current = !0;\n    return _ref;\n  }, []);\n  return [state, updateState];\n};\n\nvar CurrentOwner = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;\n\nvar isComponentFiber = function isComponentFiber(fiber) {\n  return fiber && (0 === fiber.tag || 1 === fiber.tag || 2 === fiber.tag);\n};\n\nvar isInternalComponent = function isInternalComponent(Component) {\n  return \"Query\" === Component.name || \"Mutation\" === Component.name || \"Subscription\" === Component.name;\n};\n\nfunction _ref$6() {\n  var source = \"Component\";\n  var owner = CurrentOwner.current;\n\n  if (null !== owner && isComponentFiber(owner)) {\n    var Component = owner.type;\n\n    if (isInternalComponent(Component) && isComponentFiber(owner._debugOwner)) {\n      Component = owner._debugOwner.type;\n    }\n\n    if (\"function\" == typeof Component) {\n      source = Component.displayName || Component.name || source;\n    }\n  }\n\n  return {\n    meta: {\n      source: source\n    }\n  };\n}\n\nvar useDevtoolsContext = \"production\" !== process.env.NODE_ENV && CurrentOwner ? function () {\n  return useMemo(_ref$6, []);\n} : function () {\n  return;\n};\n\nvar useMutation = function useMutation(query) {\n  var devtoolsContext = useDevtoolsContext();\n  var client = useContext(Context);\n  var ref = useImmediateState({\n    fetching: !1,\n    error: void 0,\n    data: void 0\n  });\n  var setState = ref[1];\n\n  function _ref(result) {\n    setState({\n      fetching: !1,\n      data: result.data,\n      error: result.error\n    });\n    return result;\n  }\n\n  return [ref[0], useCallback(function (variables) {\n    setState({\n      fetching: !0,\n      error: void 0,\n      data: void 0\n    });\n    var request = createRequest(query, variables);\n    return pipe(client.executeMutation(request, devtoolsContext), toPromise).then(_ref);\n  }, [client, devtoolsContext, query, setState])];\n};\n\nvar useRequest = function useRequest(query, variables) {\n  var prev = useRef(void 0);\n  return useMemo(function () {\n    var request = createRequest(query, variables);\n\n    if (void 0 !== prev.current && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n};\n\nvar LifecycleState;\n!function (LifecycleState) {\n  LifecycleState[LifecycleState.WillMount = 0] = \"WillMount\";\n  LifecycleState[LifecycleState.DidMount = 1] = \"DidMount\";\n  LifecycleState[LifecycleState.Update = 2] = \"Update\";\n}(LifecycleState || (LifecycleState = {}));\n\nfunction _ref$7(s) {\n  return _extends({}, s, {\n    fetching: !0\n  });\n}\n\nfunction _ref3$1(s) {\n  return _extends({}, s, {\n    fetching: !1\n  });\n}\n\nvar useQuery = function useQuery(args) {\n  var devtoolsContext = useDevtoolsContext();\n  var unsubscribe = useRef(noop);\n  var client = useContext(Context);\n  var ref = useImmediateState({\n    fetching: !1,\n    data: void 0,\n    error: void 0\n  });\n  var state = ref[0];\n  var setState = ref[1];\n  var request = useRequest(args.query, args.variables);\n\n  function _ref2(ref) {\n    setState({\n      fetching: !1,\n      data: ref.data,\n      error: ref.error\n    });\n  }\n\n  var executeQuery = useCallback(function (opts) {\n    var assign;\n    unsubscribe.current();\n    setState(_ref$7);\n    assign = pipe(client.executeQuery(request, _extends({\n      requestPolicy: args.requestPolicy\n    }, opts, devtoolsContext)), subscribe(_ref2)), unsubscribe.current = assign[0];\n  }, [args.requestPolicy, client, devtoolsContext, request, setState]);\n\n  function _ref4() {\n    return unsubscribe.current();\n  }\n\n  !function (effect, changes) {\n    var teardown = useRef(void 0);\n    var state = useRef(LifecycleState.WillMount);\n\n    if (state.current === LifecycleState.WillMount) {\n      state.current = LifecycleState.DidMount;\n      teardown.current = effect();\n    }\n\n    useEffect(function () {\n      if (state.current === LifecycleState.Update) {\n        return teardown.current = effect();\n      } else {\n        state.current = LifecycleState.Update;\n        return teardown.current;\n      }\n    }, changes);\n  }(function () {\n    if (args.pause) {\n      unsubscribe.current();\n      setState(_ref3$1);\n      return noop;\n    }\n\n    executeQuery();\n    return _ref4;\n  }, [executeQuery, args.pause, setState]);\n  return [state, executeQuery];\n};\n\nvar useSubscription = function useSubscription(args, handler) {\n  var devtoolsContext = useDevtoolsContext();\n  var unsubscribe = useRef(noop);\n  var client = useContext(Context);\n  var ref = useImmediateState({\n    fetching: !0,\n    error: void 0,\n    data: void 0\n  });\n  var state = ref[0];\n  var setState = ref[1];\n  var request = useRequest(args.query, args.variables);\n\n  function _ref(ref) {\n    var data = ref.data;\n    var error = ref.error;\n    setState(function (s) {\n      return {\n        fetching: !0,\n        data: void 0 !== handler ? handler(s.data, data) : data,\n        error: error\n      };\n    });\n  }\n\n  var executeSubscription = useCallback(function () {\n    var assign;\n    unsubscribe.current();\n    assign = pipe(client.executeSubscription(request, devtoolsContext), subscribe(_ref)), unsubscribe.current = assign[0];\n  }, [client, devtoolsContext, handler, request, setState]);\n\n  function _ref2() {\n    return unsubscribe.current();\n  }\n\n  useEffect(function () {\n    executeSubscription();\n    return _ref2;\n  }, [executeSubscription]);\n  return [state];\n};\n\nfunction Mutation(ref) {\n  var children = ref.children;\n  var ref$1 = useMutation(ref.query);\n  return children(_extends({}, ref$1[0], {\n    executeMutation: ref$1[1]\n  }));\n}\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) {\n      t[p] = s[p];\n    }\n  }\n\n  if (null != s && \"function\" == typeof Object.getOwnPropertySymbols) {\n    var i = 0;\n\n    for (p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0) {\n        t[p[i]] = s[p[i]];\n      }\n    }\n  }\n\n  return t;\n}\n\nfunction Query(_a) {\n  var children = _a.children;\n\n  var args = __rest(_a, [\"children\"]);\n\n  var ref = useQuery(args);\n  return children(_extends({}, ref[0], {\n    executeQuery: ref[1]\n  }));\n}\n\nfunction Subscription(_a) {\n  var children = _a.children;\n  var handler = _a.handler;\n\n  var args = __rest(_a, [\"children\", \"handler\"]);\n\n  return children(useSubscription(args, handler)[0]);\n}\n\nexport { Client, CombinedError, Consumer, Context, Mutation, Provider, Query, Subscription, cacheExchange, composeExchanges, createClient, createRequest, debugExchange, dedupExchange, defaultExchanges, fallbackExchangeIO, fetchExchange, ssrExchange, subscriptionExchange, useMutation, useQuery, useSubscription };","map":{"version":3,"sources":["../src/utils/error.ts","../src/utils/keyForQuery.ts","../src/utils/request.ts","../src/utils/ssr.ts","../src/utils/typenames.ts","../src/utils/index.ts","../src/exchanges/ssr.ts","../src/exchanges/cache.ts","../src/exchanges/subscription.ts","../src/exchanges/debug.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/fallback.ts","../src/exchanges/compose.ts","../src/exchanges/index.ts","../src/client.ts","../src/utils/toSuspenseSource.ts","../src/context.ts","../src/hooks/useImmediateState.ts","../src/hooks/useDevtoolsContext.ts","../src/hooks/useMutation.ts","../src/hooks/useRequest.ts","../src/hooks/useImmediateEffect.ts","../src/hooks/useQuery.ts","../src/hooks/useSubscription.ts","../src/components/Mutation.ts","../node_modules/tslib/tslib.es6.js","../src/components/Query.ts","../src/components/Subscription.ts"],"names":["const","generateErrorMessage","networkErr","graphQlErrs","error","undefined","message","forEach","err","trim","rehydrateGraphQlError","GraphQLError","nodes","source","positions","path","originalError","extensions","CombinedError","Error","ref","normalisedGraphQLErrors","map","networkError","super","name","graphQLErrors","response","toString","this","hash","x","h","i","l","length","charCodeAt","docNameCache","Object","create","doc","__key","definitions","reduce","acc","definition","value","process","env","NODE_ENV","printed","print","console","warn","key","getKeyForRequest","query","vars","docKey","getKeyForQuery","stringify","createRequest","q","gql","variables","addMetadata","meta","context","isSSR","window","collectTypes","obj","types","Array","isArray","inner","prototype","hasOwnProperty","call","val","push","collectTypesFromResponse","filter","v","a","indexOf","formatNode","n","selectionSet","selections","some","s","kind","formatDocument","astNode","visit","Field","InlineFragment","OperationDefinition","noop","shouldSkip","operationName","serializeResult","result","deserializeResult","operation","deserialized","ssrExchange","params","data","isCached","ssr","ops$","sharedOps$","share","forwardedOps$","pipe","op","forward","cachedOps$","client","suspense","tap","serialized","merge","restoreData","restore","_extends","extractData","initialState","cacheExchange","resultCache","Map","operationCache","mapTypeNames","handleAfterMutation","afterMutation","handleAfterQuery","afterQuery","isOperationCached","requestPolicy","has","cachedResult","get","reexecuteOperation","cacheOutcome","pendingOperations","Set","typeName","operations","add","clear","delete","set","isSubscriptionOperation","subscriptionExchange","createSubscriptionSource","observableish","forwardSubscription","make","sub","subscribe","next","errors","unsubscribe","subscriptionResults$","mergeMap","teardown$","takeUntil","forward$","debugExchange","log","dedupExchange","inFlightKeys","filterIncomingOperation","isInFlight","afterOperationResult","fetchExchange","isOperationFetchable","fetchResults$","createFetchSource","abortController","AbortController","extraOptions","fetchOptions","body","JSON","method","headers","signal","startTime","Date","now","executeFetch","then","networkLatency","complete","abort","opts","fetch","res","checkStatus","redirect","json","catch","redirectMode","status","statusText","fallbackExchangeIO","composeExchanges","exchanges","reduceRight","exchange","defaultExchanges","createClient","Client","url","makeSubject","operations$","dispatchOperation","nextOperation","results$","type","createOperationContext","onOperationStart","activeOperations","onOperationEnd","prevActive","executeRequestOperation","operationResults$","onStart","take","result$","onEnd","createRequestOperation","isCancelled","resolveSuspense","synchronousResult","onPush","end","teardown","Promise","resolve","Context","createContext","Provider","Consumer","useImmediateState","init","isMounted","useRef","useState","current","updateState","useCallback","action","newValue","setState","useLayoutEffect","state","React","isComponentFiber","fiber","tag","isInternalComponent","Component","owner","CurrentOwner","_debugOwner","displayName","useDevtoolsContext","useMutation","devtoolsContext","useContext","fetching","request","executeMutation","toPromise","useRequest","prev","useMemo","LifecycleState","effect","changes","WillMount","DidMount","useEffect","Update","useQuery","args","executeQuery","useImmediateEffect","pause","useSubscription","handler","executeSubscription","Mutation","children","__rest","e","t","p","getOwnPropertySymbols","Query","_a","Subscription"],"mappings":"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","sourcesContent":["import { GraphQLError } from 'graphql';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr !== undefined) {\n    error = `[Network] ${networkErr.message}`;\n    return error;\n  }\n\n  if (graphQlErrs !== undefined) {\n    graphQlErrs.forEach(err => {\n      error += `[GraphQL] ${err.message}\\n`;\n    });\n  }\n\n  return error.trim();\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (typeof error === 'string') {\n    return new GraphQLError(error);\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error.originalError,\n      error.extensions || {}\n    );\n  } else {\n    return error as any;\n  }\n};\n\n/** An error which can consist of GraphQL errors and Network errors. */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: GraphQLError[];\n  public networkError?: Error;\n  public response?: any;\n\n  constructor({\n    networkError,\n    graphQLErrors,\n    response,\n  }: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | GraphQLError | Error>;\n    response?: any;\n  }) {\n    const normalisedGraphQLErrors = (graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(networkError, normalisedGraphQLErrors);\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalisedGraphQLErrors;\n    this.networkError = networkError;\n    this.response = response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","import stringify from 'fast-json-stable-stringify';\nimport { DocumentNode, print } from 'graphql';\n\ninterface NameCache {\n  [key: string]: string;\n}\n\ninterface WithNameProperty {\n  name?: { value: string };\n  [key: string]: any;\n}\n\ninterface WithCacheProperty {\n  __key?: number;\n  [key: string]: any;\n}\n\nconst hash = (x: string): number => {\n  /* prettier-ignore */\n  for (var h = 5381 | 0, i = 0, l = x.length | 0; i < l; i++)\n    h = ((h << 5) + h) + x.charCodeAt(i);\n  return h >>> 0;\n};\n\nconst docNameCache = Object.create(null) as NameCache;\n\nexport const getKeyForQuery = (doc: DocumentNode): number => {\n  if ((doc as WithCacheProperty).__key !== undefined) {\n    return (doc as WithCacheProperty).__key as number;\n  }\n\n  // Using print() can be expensive, so we just check the definition nodes' names\n  let name = doc.definitions.reduce((acc, definition) => {\n    const node = definition as WithNameProperty;\n    return acc + (node.name !== undefined ? node.name.value : '');\n  }, '');\n\n  // This is for inputs that are not using constant references. In such a case\n  // we use the Document names, but we can't use those if they're not unique\n  if (process.env.NODE_ENV !== 'production' && name !== '') {\n    const printed = print(doc);\n    if (!(name in docNameCache)) {\n      docNameCache[name] = printed;\n    } else if (docNameCache[name] !== printed) {\n      console.warn(\n        'Warning: Encountered multiple DocumentNodes with the same name.'\n      );\n    }\n  }\n\n  // If no name is present the stringified document is used\n  if (name === '') {\n    name = print(doc);\n  }\n\n  const key = hash(name);\n  (doc as WithCacheProperty).__key = key;\n  return key;\n};\n\nexport const getKeyForRequest = (\n  query: DocumentNode,\n  vars?: object\n): number => {\n  const docKey = getKeyForQuery(query);\n  if (vars === undefined || vars === null) {\n    return docKey;\n  }\n\n  return hash('' + docKey + stringify(vars));\n};\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\nimport { getKeyForRequest } from './keyForQuery';\nimport { GraphQLRequest, Operation, OperationContext } from '../types';\n\nexport const createRequest = (\n  q: string | DocumentNode,\n  vars?: object\n): GraphQLRequest => {\n  const query = typeof q === 'string' ? gql([q]) : q;\n\n  return {\n    key: getKeyForRequest(query, vars),\n    query,\n    variables: vars || {},\n  };\n};\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  source: Operation,\n  meta: Exclude<OperationContext['meta'], undefined>\n) => ({\n  ...source,\n  context: {\n    ...source.context,\n    meta: {\n      ...source.context.meta,\n      ...meta,\n    },\n  },\n});\n","export const isSSR =\n  typeof window === 'undefined' || !('HTMLElement' in window);\n","import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  OperationDefinitionNode,\n  visit,\n} from 'graphql';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: string[] = []) => {\n  if (Array.isArray(obj)) {\n    obj.forEach(inner => collectTypes(inner, types));\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const val = obj[key];\n        if (key === '__typename' && typeof val === 'string') {\n          types.push(val);\n        } else if (typeof val === 'object' && val !== null) {\n          collectTypes(val, types);\n        }\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object) =>\n  collectTypes(response as EntityLike).filter((v, i, a) => a.indexOf(v) === i);\n\nconst formatNode = (\n  n: FieldNode | InlineFragmentNode | OperationDefinitionNode\n) => {\n  if (n.selectionSet === undefined) {\n    return false;\n  }\n\n  if (\n    n.selectionSet.selections.some(\n      s => s.kind === 'Field' && s.name.value === '__typename'\n    )\n  ) {\n    return n;\n  }\n\n  return {\n    ...n,\n    selectionSet: {\n      ...n.selectionSet,\n      selections: [\n        ...n.selectionSet.selections,\n        {\n          kind: 'Field',\n          name: {\n            kind: 'Name',\n            value: '__typename',\n          },\n        },\n      ],\n    },\n  };\n};\n\nexport const formatDocument = (astNode: DocumentNode) =>\n  visit(astNode, {\n    Field: formatNode,\n    InlineFragment: formatNode,\n    OperationDefinition: formatNode,\n  });\n","export * from './error';\nexport * from './keyForQuery';\nexport * from './request';\nexport * from './ssr';\nexport * from './typenames';\nexport * from './toSuspenseSource';\n\nexport const noop = () => {\n  /* noop */\n};\n","import { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { CombinedError } from '../utils';\n\nexport interface SerializedResult {\n  data?: any;\n  error?: {\n    networkError?: string;\n    graphQLErrors: string[];\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  initialState?: SSRData;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'subscription' && operationName !== 'query';\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = ({\n  data,\n  error,\n}: OperationResult): SerializedResult => {\n  const result: SerializedResult = { data, error: undefined };\n  if (error !== undefined) {\n    result.error = {\n      networkError: '' + error.networkError,\n      graphQLErrors: error.graphQLErrors.map(x => '' + x),\n    };\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult\n): OperationResult => {\n  const { error, data } = result;\n  const deserialized: OperationResult = { operation, data, error: undefined };\n  if (error !== undefined) {\n    deserialized.error = new CombinedError({\n      networkError: new Error(error.networkError),\n      graphQLErrors: error.graphQLErrors,\n    });\n  }\n\n  return deserialized;\n};\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params?: SSRExchangeParams): SSRExchange => {\n  const data: SSRData = {};\n\n  const isCached = (operation: Operation) => {\n    return !shouldSkip(operation) && data[operation.key] !== undefined;\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(op => !isCached(op)),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => isCached(op)),\n      map(op => {\n        const serialized = data[op.key];\n        return deserializeResult(op, serialized);\n      })\n    );\n\n    if (client.suspense) {\n      // Inside suspense-mode we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (!shouldSkip(operation)) {\n            const serialized = serializeResult(result);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // Outside of suspense-mode we delete results from the cache as they're resolved\n      cachedOps$ = pipe(\n        cachedOps$,\n        tap((result: OperationResult) => {\n          delete data[result.operation.key];\n        })\n      );\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => Object.assign(data, restore);\n  ssr.extractData = () => Object.assign({}, data);\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult } from '../types';\nimport {\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\n\ninterface OperationCache {\n  [key: string]: Set<number>;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'mutation' && operationName !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client }) => {\n  const resultCache = new Map() as ResultCache;\n  const operationCache = Object.create(null) as OperationCache;\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => ({\n    ...operation,\n    query: formatDocument(operation.query),\n  });\n\n  const handleAfterMutation = afterMutation(\n    resultCache,\n    operationCache,\n    client\n  );\n\n  const handleAfterQuery = afterQuery(resultCache, operationCache);\n\n  const isOperationCached = operation => {\n    const {\n      key,\n      operationName,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      operationName === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const { key, context } = operation;\n        const cachedResult = resultCache.get(key);\n        if (context.requestPolicy === 'cache-and-network') {\n          reexecuteOperation(client, operation);\n        }\n\n        if (cachedResult !== undefined) {\n          return {\n            ...cachedResult,\n            operation: addMetadata(cachedResult.operation, {\n              cacheOutcome: 'hit',\n            }),\n          };\n        }\n\n        return {\n          data: undefined,\n          error: undefined,\n          operation: addMetadata(operation, { cacheOutcome: 'miss' }),\n        };\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      forward,\n      tap(response => {\n        if (\n          response.operation &&\n          response.operation.operationName === 'mutation'\n        ) {\n          handleAfterMutation(response);\n        } else if (\n          response.operation &&\n          response.operation.operationName === 'query'\n        ) {\n          handleAfterQuery(response);\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nconst reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation({\n    ...operation,\n    context: {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    },\n  });\n};\n\n// Invalidates the cache given a mutation's response\nexport const afterMutation = (\n  resultCache: ResultCache,\n  operationCache: OperationCache,\n  client: Client\n) => (response: OperationResult) => {\n  const pendingOperations = new Set<number>();\n\n  collectTypesFromResponse(response.data).forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.forEach(key => pendingOperations.add(key));\n    operations.clear();\n  });\n\n  pendingOperations.forEach(key => {\n    if (resultCache.has(key)) {\n      const operation = (resultCache.get(key) as OperationResult).operation;\n      resultCache.delete(key);\n      reexecuteOperation(client, operation);\n    }\n  });\n};\n\n// Mark typenames on typenameInvalidate for early invalidation\nconst afterQuery = (\n  resultCache: ResultCache,\n  operationCache: OperationCache\n) => (response: OperationResult) => {\n  const { operation, data } = response;\n\n  if (data === undefined) {\n    return;\n  }\n\n  resultCache.set(operation.key, response);\n\n  collectTypesFromResponse(response.data).forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.add(operation.key);\n  });\n};\n","import { print } from 'graphql';\n\nimport {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport { CombinedError } from '../utils/error';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables?: object;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n}\n\nconst isSubscriptionOperation = (operation: Operation) =>\n  operation.operationName === 'subscription';\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n}: SubscriptionExchangeOpts): Exchange => ({ forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(([next, complete]) => {\n      // TODO: The conversion of the result here is very similar to fetch;\n      // We can maybe extract the logic into generic GraphQL utilities\n      const sub = observableish.subscribe({\n        next: result =>\n          next({\n            operation,\n            data: result.data || undefined,\n            error: Array.isArray(result.errors)\n              ? new CombinedError({\n                  graphQLErrors: result.errors,\n                  response: undefined,\n                })\n              : undefined,\n          }),\n        error: err =>\n          next({\n            operation,\n            data: undefined,\n            error: new CombinedError({\n              networkError: err,\n              response: undefined,\n            }),\n          }),\n        complete,\n      });\n\n      // NOTE: Destructuring sub is avoided here to preserve its potential binding\n      return () => sub.unsubscribe();\n    });\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperation),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(\n          createSubscriptionSource(operation),\n          takeUntil(teardown$)\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperation(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n","import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\nexport const debugExchange: Exchange = ({ forward }) => {\n  return ops$ =>\n    pipe(\n      ops$,\n      // eslint-disable-next-line no-console\n      tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n      forward,\n      tap(result =>\n        // eslint-disable-next-line no-console\n        console.log('[Exchange debug]: Completed operation: ', result)\n      )\n    );\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, operationName } = operation;\n    if (operationName === 'teardown') {\n      inFlightKeys.delete(key);\n      return true;\n    } else if (operationName !== 'query') {\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation }: OperationResult) => {\n    inFlightKeys.delete(operation.key);\n  };\n\n  return ops$ => {\n    const forward$ = pipe(\n      ops$,\n      filter(filterIncomingOperation)\n    );\n    return pipe(\n      forward(forward$),\n      tap(afterOperationResult)\n    );\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { print } from 'graphql';\nimport { filter, make, merge, mergeMap, pipe, share, takeUntil } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\nimport { addMetadata, CombinedError } from '../utils';\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward }) => {\n  const isOperationFetchable = (operation: Operation) => {\n    const { operationName } = operation;\n    return operationName === 'query' || operationName === 'mutation';\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(isOperationFetchable),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(\n          createFetchSource(operation),\n          takeUntil(teardown$)\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isOperationFetchable(op)),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n\nconst createFetchSource = (operation: Operation) => {\n  if (operation.operationName === 'subscription') {\n    throw new Error(\n      'Received a subscription operation in the httpExchange. You are probably trying to create a subscription. Have you added a subscriptionExchange?'\n    );\n  }\n\n  return make<OperationResult>(([next, complete]) => {\n    const abortController =\n      typeof AbortController !== 'undefined'\n        ? new AbortController()\n        : undefined;\n\n    const { context } = operation;\n\n    const extraOptions =\n      typeof context.fetchOptions === 'function'\n        ? context.fetchOptions()\n        : context.fetchOptions || {};\n\n    const fetchOptions = {\n      body: JSON.stringify({\n        query: print(operation.query),\n        variables: operation.variables,\n      }),\n      method: 'POST',\n      ...extraOptions,\n      headers: {\n        'content-type': 'application/json',\n        ...extraOptions.headers,\n      },\n      signal:\n        abortController !== undefined ? abortController.signal : undefined,\n    };\n\n    const startTime = Date.now();\n    executeFetch(operation, fetchOptions).then(result => {\n      if (result !== undefined) {\n        next({\n          ...result,\n          operation: addMetadata(result.operation, {\n            networkLatency: Date.now() - startTime,\n          }),\n        });\n      }\n\n      complete();\n    });\n\n    return () => {\n      if (abortController !== undefined) {\n        abortController.abort();\n      }\n    };\n  });\n};\n\nconst executeFetch = (operation: Operation, opts: RequestInit) => {\n  let response: Response | undefined;\n  const { url } = operation.context;\n\n  return fetch(url, opts)\n    .then(res => {\n      response = res;\n      checkStatus(opts.redirect, response);\n      return response.json();\n    })\n    .then(result => ({\n      operation,\n      data: result.data,\n      error: Array.isArray(result.errors)\n        ? new CombinedError({\n            graphQLErrors: result.errors,\n            response,\n          })\n        : undefined,\n    }))\n    .catch(err => {\n      if (err.name === 'AbortError') {\n        return undefined;\n      }\n\n      return {\n        operation,\n        data: undefined,\n        error: new CombinedError({\n          networkError: err,\n          response,\n        }),\n      };\n    });\n};\n\nconst checkStatus = (redirectMode: string = 'follow', response: Response) => {\n  const statusRangeEnd = redirectMode === 'manual' ? 400 : 300;\n\n  if (response.status < 200 || response.status >= statusRangeEnd) {\n    throw new Error(response.statusText);\n  }\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { ExchangeIO, Operation } from '../types';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchangeIO: ExchangeIO = ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(({ operationName }) => {\n      if (\n        operationName !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        console.warn(\n          `No exchange has handled operations of type \"${operationName}\". Check whether you've added an exchange responsible for these operations.`\n        );\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n","import { Exchange } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]): Exchange => {\n  if (exchanges.length === 1) {\n    return exchanges[0];\n  }\n\n  return ({ client, forward: outerForward }) => {\n    return exchanges.reduceRight((forward, exchange) => {\n      return exchange({ client, forward });\n    }, outerForward);\n  };\n};\n","export { ssrExchange } from './ssr';\nexport { cacheExchange } from './cache';\nexport { subscriptionExchange } from './subscription';\nexport { debugExchange } from './debug';\nexport { dedupExchange } from './dedup';\nexport { fetchExchange } from './fetch';\nexport { fallbackExchangeIO } from './fallback';\nexport { composeExchanges } from './compose';\n\nimport { cacheExchange } from './cache';\nimport { dedupExchange } from './dedup';\nimport { fetchExchange } from './fetch';\n\nexport const defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport {\n  filter,\n  makeSubject,\n  onEnd,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n} from 'wonka';\n\nimport {\n  composeExchanges,\n  defaultExchanges,\n  fallbackExchangeIO,\n} from './exchanges';\n\nimport {\n  Exchange,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationResult,\n  OperationType,\n} from './types';\n\nimport { toSuspenseSource } from './utils';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n}\n\ninterface ActiveOperations {\n  [operationKey: string]: number;\n}\n\nexport const createClient = (opts: ClientOptions) => new Client(opts);\n\n/** The URQL application-wide client library. Each execute method starts a GraphQL request and returns a stream of results. */\nexport class Client {\n  // These are variables derived from ClientOptions\n  url: string;\n  fetchOptions?: RequestInit | (() => RequestInit);\n  exchange: Exchange;\n  suspense: boolean;\n\n  // These are internals to be used to keep track of operations\n  dispatchOperation: (operation: Operation) => void;\n  operations$: Source<Operation>;\n  results$: Source<OperationResult>;\n  activeOperations = Object.create(null) as ActiveOperations;\n\n  constructor(opts: ClientOptions) {\n    this.url = opts.url;\n    this.fetchOptions = opts.fetchOptions;\n    this.suspense = !!opts.suspense;\n\n    // This subject forms the input of operations; executeOperation may be\n    // called to dispatch a new operation on the subject\n    const [operations$, nextOperation] = makeSubject<Operation>();\n    this.operations$ = operations$;\n    this.dispatchOperation = nextOperation;\n\n    const exchanges =\n      opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n\n    // All exchange are composed into a single one and are called using the constructed client\n    // and the fallback exchange stream\n    this.exchange = composeExchanges(exchanges);\n\n    // All operations run through the exchanges in a pipeline-like fashion\n    // and this observable then combines all their results\n    this.results$ = share(\n      this.exchange({\n        client: this,\n        forward: fallbackExchangeIO,\n      })(this.operations$)\n    );\n  }\n\n  private createOperationContext = (\n    opts?: Partial<OperationContext>\n  ): OperationContext => {\n    const { requestPolicy = 'cache-first' } = opts || {};\n\n    return {\n      url: this.url,\n      fetchOptions: this.fetchOptions,\n      ...opts,\n      requestPolicy,\n    };\n  };\n\n  createRequestOperation = (\n    type: OperationType,\n    { key, query, variables }: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Operation => ({\n    key,\n    query,\n    variables,\n    operationName: type,\n    context: this.createOperationContext(opts),\n  });\n\n  /** Counts up the active operation key and dispatches the operation */\n  private onOperationStart(operation: Operation) {\n    const { key } = operation;\n    this.activeOperations[key] = (this.activeOperations[key] || 0) + 1;\n    this.dispatchOperation(operation);\n  }\n\n  /** Deletes an active operation's result observable and sends a teardown signal through the exchange pipeline */\n  private onOperationEnd(operation: Operation) {\n    const { key } = operation;\n    const prevActive = this.activeOperations[key] || 0;\n    const newActive = (this.activeOperations[key] =\n      prevActive <= 0 ? 0 : prevActive - 1);\n\n    if (newActive <= 0) {\n      this.dispatchOperation({ ...operation, operationName: 'teardown' });\n    }\n  }\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation(operation: Operation): Source<OperationResult> {\n    const { key, operationName } = operation;\n    const operationResults$ = pipe(\n      this.results$,\n      filter(res => res.operation.key === key)\n    );\n\n    if (operationName === 'mutation') {\n      // A mutation is always limited to just a single result and is never shared\n      return pipe(\n        operationResults$,\n        onStart<OperationResult>(() => this.dispatchOperation(operation)),\n        take(1)\n      );\n    }\n\n    const result$ = pipe(\n      operationResults$,\n      onStart<OperationResult>(() => this.onOperationStart(operation)),\n      onEnd<OperationResult>(() => this.onOperationEnd(operation))\n    );\n\n    return this.suspense ? toSuspenseSource(result$) : result$;\n  }\n\n  reexecuteOperation = (operation: Operation) => {\n    // Reexecute operation only if any subscribers are still subscribed to the\n    // operation's exchange results\n    if ((this.activeOperations[operation.key] || 0) > 0) {\n      this.dispatchOperation(operation);\n    }\n  };\n\n  executeQuery = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('query', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n\n  executeSubscription = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('subscription', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n\n  executeMutation = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('mutation', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n}\n","import { pipe, make, onPush, onEnd, subscribe, Source } from 'wonka';\n\n/** This converts a Source to a suspense Source; It will forward the first result synchronously or throw a promise that resolves when the result becomes available */\nexport const toSuspenseSource = <T>(source: Source<T>): Source<T> => {\n  // Create a new Source from scratch so we have full control over the Source's lifecycle\n  return make(([push, end]) => {\n    let isCancelled = false;\n    let resolveSuspense;\n    let synchronousResult;\n\n    const [teardown] = pipe(\n      source,\n      // The onPush and onEnd forward the underlying results as usual, so that when no\n      // suspense promise is thrown, the source behaves as it normally would\n      onPush(push),\n      onEnd(end),\n      subscribe(value => {\n        // When this operation resolved synchronously assign the result to\n        // synchronousResult which will be picked up below\n        if (resolveSuspense === undefined) {\n          synchronousResult = value;\n        } else if (!isCancelled) {\n          // Otherwise resolve the thrown promise,\n          resolveSuspense(value);\n          // And end and teardown both sources, since suspense will abort the\n          // underlying rendering component anyway\n          end();\n          teardown();\n        }\n      })\n    );\n\n    // If we have a synchronous result, push it onto this source, which is synchronous\n    // otherwise throw a new promise which will resolve later\n    if (synchronousResult === undefined) {\n      throw new Promise(resolve => {\n        resolveSuspense = resolve;\n      });\n    }\n\n    // Since promises aren't cancellable we have a flag that prevents\n    // the thrown promise from resolving if this source is cancelled\n    return () => {\n      isCancelled = true;\n      teardown();\n    };\n  });\n};\n","import { createContext } from 'react';\nimport { Client, createClient } from './client';\n\n// We assume some default options here; mainly not to actually be used\n// but not to error catastrophically if someone is just playing around\nconst defaultClient = createClient({ url: '/graphql' });\n\nexport const Context = createContext<Client>(defaultClient);\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;\n","import { useRef, useState, useCallback, useLayoutEffect } from 'react';\nimport { isSSR } from '../utils';\n\ntype SetStateAction<S> = S | ((prevState: S) => S);\ntype SetState<S> = (action: SetStateAction<S>) => void;\n\n/**\n * This is a drop-in replacement for useState, limited to object-based state.\n * During initial mount it will mutably update the state, instead of scheduling\n * a React update using setState\n */\nexport const useImmediateState = <S extends {}>(init: S): [S, SetState<S>] => {\n  const isMounted = useRef(false);\n  const initialState = useRef<S>({ ...init });\n  const [state, setState] = useState<S>(initialState.current);\n\n  // This wraps setState and updates the state mutably on initial mount\n  const updateState: SetState<S> = useCallback(\n    (action: SetStateAction<S>): void => {\n      if (!isMounted.current) {\n        const newValue =\n          typeof action === 'function'\n            ? (action as (arg: S) => S)(initialState.current)\n            : action;\n        Object.assign(initialState.current, newValue);\n      } else {\n        setState(action);\n      }\n    },\n    []\n  );\n\n  !isSSR && // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n\n  return [state, updateState];\n};\n","import * as React from 'react';\nimport { OperationContext } from '../types';\n\nconst {\n  ReactCurrentOwner: CurrentOwner,\n} = (React as any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// Is the Fiber a FunctionComponent, ClassComponent, or IndeterminateComponent\nconst isComponentFiber = (fiber: void | { tag: number }) =>\n  fiber && (fiber.tag === 0 || fiber.tag === 1 || fiber.tag === 2);\n\n// Is the component one of ours (just a heuristic to avoid circular dependencies or flags)\nconst isInternalComponent = (Component: { name: string }) =>\n  Component.name === 'Query' ||\n  Component.name === 'Mutation' ||\n  Component.name === 'Subscription';\n\nconst useDevtoolsContextImpl = (): Partial<OperationContext> => {\n  return React.useMemo(() => {\n    let source = 'Component';\n\n    // Check whether the CurrentOwner is set\n    const owner = CurrentOwner.current;\n    if (owner !== null && isComponentFiber(owner)) {\n      let Component = owner.type;\n\n      // If this is one of our own components then check the parent\n      if (\n        isInternalComponent(Component) &&\n        isComponentFiber(owner._debugOwner)\n      ) {\n        Component = owner._debugOwner.type;\n      }\n\n      // Get the Component's name if it has one\n      if (typeof Component === 'function') {\n        source = Component.displayName || Component.name || source;\n      }\n    }\n\n    return { meta: { source } };\n  }, []);\n};\n\n/** Creates additional context values for serving metadata to devtools. */\nexport const useDevtoolsContext: () => Partial<OperationContext> | undefined =\n  // NOTE: We check for CurrentOwner in case it'll be unexpectedly changed in React's source\n  process.env.NODE_ENV !== 'production' && !!CurrentOwner\n    ? useDevtoolsContextImpl\n    : () => undefined;\n","import { DocumentNode } from 'graphql';\nimport { useContext, useCallback } from 'react';\nimport { pipe, toPromise } from 'wonka';\nimport { Context } from '../context';\nimport { OperationResult } from '../types';\nimport { CombinedError, createRequest } from '../utils';\nimport { useImmediateState } from './useImmediateState';\nimport { useDevtoolsContext } from './useDevtoolsContext';\n\nexport interface UseMutationState<T> {\n  fetching: boolean;\n  data?: T;\n  error?: CombinedError;\n}\n\nexport type UseMutationResponse<T, V> = [\n  UseMutationState<T>,\n  (variables?: V) => Promise<OperationResult<T>>\n];\n\nexport const useMutation = <T = any, V = object>(\n  query: DocumentNode | string\n): UseMutationResponse<T, V> => {\n  const devtoolsContext = useDevtoolsContext();\n  const client = useContext(Context);\n  const [state, setState] = useImmediateState<UseMutationState<T>>({\n    fetching: false,\n    error: undefined,\n    data: undefined,\n  });\n\n  const executeMutation = useCallback(\n    (variables?: V) => {\n      setState({ fetching: true, error: undefined, data: undefined });\n\n      const request = createRequest(query, variables as any);\n\n      return pipe(\n        client.executeMutation(request, devtoolsContext),\n        toPromise\n      ).then(result => {\n        const { data, error } = result;\n        setState({ fetching: false, data, error });\n        return result;\n      });\n    },\n    [client, devtoolsContext, query, setState]\n  );\n\n  return [state, executeMutation];\n};\n","import { DocumentNode } from 'graphql';\nimport { useRef, useMemo } from 'react';\nimport { GraphQLRequest } from '../types';\nimport { createRequest } from '../utils';\n\n/** Creates a request from a query and variables but preserves reference equality if the key isn't changing */\nexport const useRequest = (\n  query: string | DocumentNode,\n  variables?: any\n): GraphQLRequest => {\n  const prev = useRef<undefined | GraphQLRequest>(undefined);\n\n  return useMemo(() => {\n    const request = createRequest(query, variables);\n    // We manually ensure reference equality if the key hasn't changed\n    if (prev.current !== undefined && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useRef, useEffect, EffectCallback } from 'react';\n\nenum LifecycleState {\n  WillMount = 0,\n  DidMount = 1,\n  Update = 2,\n}\n\n/** This is a drop-in replacement for useEffect that will execute the first effect that happens during initial mount synchronously */\nexport const useImmediateEffect = (\n  effect: EffectCallback,\n  changes: ReadonlyArray<any>\n) => {\n  const teardown = useRef<ReturnType<EffectCallback>>(undefined);\n  const state = useRef(LifecycleState.WillMount);\n\n  // On initial render we just execute the effect\n  if (state.current === LifecycleState.WillMount) {\n    state.current = LifecycleState.DidMount;\n    teardown.current = effect();\n  }\n\n  useEffect(() => {\n    // Initially we skip executing the effect since we've already done so on\n    // initial render, then we execute it as usual\n    if (state.current === LifecycleState.Update) {\n      return (teardown.current = effect());\n    } else {\n      state.current = LifecycleState.Update;\n      return teardown.current;\n    }\n  }, changes);\n};\n","import { DocumentNode } from 'graphql';\nimport { useCallback, useContext, useRef } from 'react';\nimport { pipe, subscribe } from 'wonka';\nimport { Context } from '../context';\nimport { OperationContext, RequestPolicy } from '../types';\nimport { CombinedError, noop } from '../utils';\nimport { useDevtoolsContext } from './useDevtoolsContext';\nimport { useRequest } from './useRequest';\nimport { useImmediateEffect } from './useImmediateEffect';\nimport { useImmediateState } from './useImmediateState';\n\nexport interface UseQueryArgs<V> {\n  query: string | DocumentNode;\n  variables?: V;\n  requestPolicy?: RequestPolicy;\n  pause?: boolean;\n}\n\nexport interface UseQueryState<T> {\n  fetching: boolean;\n  data?: T;\n  error?: CombinedError;\n}\n\nexport type UseQueryResponse<T> = [\n  UseQueryState<T>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nexport const useQuery = <T = any, V = object>(\n  args: UseQueryArgs<V>\n): UseQueryResponse<T> => {\n  const devtoolsContext = useDevtoolsContext();\n  const unsubscribe = useRef(noop);\n  const client = useContext(Context);\n\n  // This is like useState but updates the state object\n  // immediately, when we're still before the initial mount\n  const [state, setState] = useImmediateState<UseQueryState<T>>({\n    fetching: false,\n    data: undefined,\n    error: undefined,\n  });\n\n  // This creates a request which will keep a stable reference\n  // if request.key doesn't change\n  const request = useRequest(args.query, args.variables);\n\n  const executeQuery = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      unsubscribe.current();\n\n      setState(s => ({ ...s, fetching: true }));\n\n      [unsubscribe.current] = pipe(\n        client.executeQuery(request, {\n          requestPolicy: args.requestPolicy,\n          ...opts,\n          ...devtoolsContext,\n        }),\n        subscribe(({ data, error }) => {\n          setState({ fetching: false, data, error });\n        })\n      );\n    },\n    [args.requestPolicy, client, devtoolsContext, request, setState]\n  );\n\n  useImmediateEffect(() => {\n    if (args.pause) {\n      unsubscribe.current();\n      setState(s => ({ ...s, fetching: false }));\n      return noop;\n    }\n\n    executeQuery();\n    return () => unsubscribe.current(); // eslint-disable-line\n  }, [executeQuery, args.pause, setState]);\n\n  return [state, executeQuery];\n};\n","import { DocumentNode } from 'graphql';\nimport { useCallback, useContext, useEffect, useRef } from 'react';\nimport { pipe, subscribe } from 'wonka';\nimport { Context } from '../context';\nimport { CombinedError, noop } from '../utils';\nimport { useDevtoolsContext } from './useDevtoolsContext';\nimport { useRequest } from './useRequest';\nimport { useImmediateState } from './useImmediateState';\n\nexport interface UseSubscriptionArgs<V> {\n  query: DocumentNode | string;\n  variables?: V;\n}\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\nexport interface UseSubscriptionState<T> {\n  fetching: boolean;\n  data?: T;\n  error?: CombinedError;\n}\n\nexport type UseSubscriptionResponse<T> = [UseSubscriptionState<T>];\n\nexport const useSubscription = <T = any, R = T, V = object>(\n  args: UseSubscriptionArgs<V>,\n  handler?: SubscriptionHandler<T, R>\n): UseSubscriptionResponse<R> => {\n  const devtoolsContext = useDevtoolsContext();\n  const unsubscribe = useRef(noop);\n  const client = useContext(Context);\n\n  const [state, setState] = useImmediateState<UseSubscriptionState<R>>({\n    fetching: true,\n    error: undefined,\n    data: undefined,\n  });\n\n  // This creates a request which will keep a stable reference\n  // if request.key doesn't change\n  const request = useRequest(args.query, args.variables);\n\n  const executeSubscription = useCallback(() => {\n    unsubscribe.current();\n\n    [unsubscribe.current] = pipe(\n      client.executeSubscription(request, devtoolsContext),\n      subscribe(({ data, error }) => {\n        setState(s => ({\n          fetching: true,\n          data: handler !== undefined ? handler(s.data, data) : data,\n          error,\n        }));\n      })\n    );\n  }, [client, devtoolsContext, handler, request, setState]);\n\n  // Trigger subscription on query change\n  // We don't use useImmediateEffect here as we have no way of\n  // unsubscribing from subscriptions during SSR\n  useEffect(() => {\n    executeSubscription();\n    return () => unsubscribe.current(); // eslint-disable-line\n  }, [executeSubscription]);\n\n  return [state];\n};\n","import { ReactElement } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { OperationResult } from '../types';\nimport { useMutation, UseMutationState } from '../hooks';\n\nexport interface MutationProps<T, V> {\n  query: DocumentNode | string;\n  children: (arg: MutationState<T, V>) => ReactElement<any>;\n}\n\nexport interface MutationState<T, V> extends UseMutationState<T> {\n  executeMutation: (variables?: V) => Promise<OperationResult<T>>;\n}\n\nexport function Mutation<T = any, V = any>({\n  children,\n  query,\n}: MutationProps<T, V>): ReactElement<any> {\n  const [state, executeMutation] = useMutation<T, V>(query);\n  return children({ ...state, executeMutation });\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ReactElement } from 'react';\nimport { OperationContext } from '../types';\nimport { useQuery, UseQueryArgs, UseQueryState } from '../hooks';\n\nexport interface QueryProps<T, V> extends UseQueryArgs<V> {\n  children: (arg: QueryState<T>) => ReactElement<any>;\n}\n\nexport interface QueryState<T> extends UseQueryState<T> {\n  executeQuery: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Query<T = any, V = any>({\n  children,\n  ...args\n}: QueryProps<T, V>): ReactElement<any> {\n  const [state, executeQuery] = useQuery<T, V>(args);\n  return children({ ...state, executeQuery });\n}\n","import { ReactElement } from 'react';\n\nimport {\n  useSubscription,\n  UseSubscriptionArgs,\n  UseSubscriptionState,\n  SubscriptionHandler,\n} from '../hooks';\n\nexport interface SubscriptionProps<T, R, V> extends UseSubscriptionArgs<V> {\n  handler?: SubscriptionHandler<T, R>;\n  children: (arg: UseSubscriptionState<R>) => ReactElement<any>;\n}\n\nexport function Subscription<T = any, R = T, V = any>({\n  children,\n  handler,\n  ...args\n}: SubscriptionProps<T, R, V>): ReactElement<any> {\n  const [state] = useSubscription<T, R, V>(args, handler);\n  return children(state);\n}\n"]},"metadata":{},"sourceType":"module"}